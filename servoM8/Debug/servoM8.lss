
servoM8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  00800060  00800060  00001d82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001df0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031a0  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000140d  00000000  00000000  00005218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019d8  00000000  00000000  00006625  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000650  00000000  00000000  00008000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b36  00000000  00000000  00008650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad4  00000000  00000000  00009186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000ac5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
       2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
       4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
       6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
       8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
       a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
       c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
       e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
      10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
      12:	52 c0       	rjmp	.+164    	; 0xb8 <__vector_9>
      14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
      16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
      18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
      1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
      1c:	80 c0       	rjmp	.+256    	; 0x11e <__vector_14>
      1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
      20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
      22:	0e cb       	rjmp	.-2532   	; 0xfffff640 <__eeprom_end+0xff7ef640>
      24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
      26:	df c3       	rjmp	.+1982   	; 0x7e6 <main+0xcc>
      28:	b3 c3       	rjmp	.+1894   	; 0x790 <main+0x76>
      2a:	df c3       	rjmp	.+1982   	; 0x7ea <main+0xd0>
      2c:	e3 c3       	rjmp	.+1990   	; 0x7f4 <main+0xda>
      2e:	e8 c3       	rjmp	.+2000   	; 0x800 <main+0xe6>
      30:	ec c3       	rjmp	.+2008   	; 0x80a <main+0xf0>
      32:	f0 c3       	rjmp	.+2016   	; 0x814 <main+0xfa>
      34:	f1 c3       	rjmp	.+2018   	; 0x818 <main+0xfe>
      36:	f2 c3       	rjmp	.+2020   	; 0x81c <main+0x102>
      38:	f3 c3       	rjmp	.+2022   	; 0x820 <main+0x106>
      3a:	aa c3       	rjmp	.+1876   	; 0x790 <main+0x76>
      3c:	a9 c3       	rjmp	.+1874   	; 0x790 <main+0x76>
      3e:	a8 c3       	rjmp	.+1872   	; 0x790 <main+0x76>
      40:	a7 c3       	rjmp	.+1870   	; 0x790 <main+0x76>
      42:	a6 c3       	rjmp	.+1868   	; 0x790 <main+0x76>
      44:	a5 c3       	rjmp	.+1866   	; 0x790 <main+0x76>
      46:	ee c3       	rjmp	.+2012   	; 0x824 <main+0x10a>
      48:	f0 c3       	rjmp	.+2016   	; 0x82a <main+0x110>
      4a:	f4 c3       	rjmp	.+2024   	; 0x834 <main+0x11a>
      4c:	f8 c3       	rjmp	.+2032   	; 0x83e <main+0x124>
      4e:	ff c3       	rjmp	.+2046   	; 0x84e <main+0x134>

00000050 <__ctors_end>:
      50:	11 24       	eor	r1, r1
      52:	1f be       	out	0x3f, r1	; 63
      54:	cf e5       	ldi	r28, 0x5F	; 95
      56:	d4 e0       	ldi	r29, 0x04	; 4
      58:	de bf       	out	0x3e, r29	; 62
      5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_clear_bss>:
      5c:	21 e0       	ldi	r18, 0x01	; 1
      5e:	a0 e6       	ldi	r26, 0x60	; 96
      60:	b0 e0       	ldi	r27, 0x00	; 0
      62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
      64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
      66:	a4 3a       	cpi	r26, 0xA4	; 164
      68:	b2 07       	cpc	r27, r18
      6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
      6c:	56 d3       	rcall	.+1708   	; 0x71a <main>
      6e:	4d ce       	rjmp	.-870    	; 0xfffffd0a <__eeprom_end+0xff7efd0a>

00000070 <__bad_interrupt>:
      70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <adc_init>:

void adc_init(void)
// Initialize ADC conversion for reading current monitoring and position.
{
    // Read from position first.
    adc_channel = ADC_CHANNEL_POSITION;
      72:	81 e0       	ldi	r24, 0x01	; 1
      74:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <adc_channel>

    // Initialize flags and values.
    adc_power_ready = 0;
      78:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <adc_power_ready>
    adc_power_value = 0;
      7c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <adc_power_value+0x1>
      80:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <adc_power_value>
    adc_position_ready = 0;
      84:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_position_ready>
    adc_position_value = 0;
      88:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <adc_position_value+0x1>
      8c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <adc_position_value>
    adc_voltage_needed = 1;
      90:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <adc_voltage_needed>
             ADPS;											// Prescale -- see above.
#endif // __AVR_ATtiny45__ || __AVR_ATtiny85____

#if defined(__AVR_ATmega8__)
    // Make sure ports PC0 (ADC0), PC1 (ADC1) and PC2 (ADC2) are set low.
    PORTC &= ~((1<<PC2) | (1<<PC1) | (1<<PC0));
      94:	85 b3       	in	r24, 0x15	; 21
      96:	88 7f       	andi	r24, 0xF8	; 248
      98:	85 bb       	out	0x15, r24	; 21

    // Set the ADC multiplexer selection register.
    ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
      9a:	82 e4       	ldi	r24, 0x42	; 66
      9c:	87 b9       	out	0x07, r24	; 7
            (0<<MUX3) | (0<<MUX2) | (1<<MUX1) | (0<<MUX0) | // Select ADC2 (PC2) as analog input.
            (0<<ADLAR);                                     // Keep high bits right adjusted.


    // Set the ADC control and status register A.
    ADCSRA = (1<<ADEN) |                                    // Enable ADC.
      9e:	8e ed       	ldi	r24, 0xDE	; 222
      a0:	86 b9       	out	0x06, r24	; 6
             (1<<ADIF) |                                    // Clear any pending interrupt.
             (1<<ADIE) |                                    // Activate ADC conversion complete interrupt.
             ADPS;											// Prescale -- see above.

    // Reset the counter value to initiate another ADC sample at the specified time.
    TCNT0 = 256 - CRVALUE;
      a2:	82 eb       	ldi	r24, 0xB2	; 178
      a4:	82 bf       	out	0x32, r24	; 50
    OCR0A = CRVALUE;
#endif // __AVR_ATtiny45__ || __AVR_ATtiny85__

#if defined(__AVR_ATmega8__)
    // Set timer/counter0 control register.
	TCCR0 = CSPS;											// Timer clock prescale -- see above.
      a6:	85 e0       	ldi	r24, 0x05	; 5
      a8:	83 bf       	out	0x33, r24	; 51

    // Clear any pending interrupt.
    TIFR |= (1<<TOV0);                                      // Interrupt on overflow.
      aa:	88 b7       	in	r24, 0x38	; 56
      ac:	81 60       	ori	r24, 0x01	; 1
      ae:	88 bf       	out	0x38, r24	; 56

    // Set the timer/counter0 interrupt masks.
    TIMSK |= (1<<TOIE0);                                    // Interrupt on overflow.
      b0:	89 b7       	in	r24, 0x39	; 57
      b2:	81 60       	ori	r24, 0x01	; 1
      b4:	89 bf       	out	0x39, r24	; 57
      b6:	08 95       	ret

000000b8 <__vector_9>:

SIGNAL(TIMER0_OVF_vect)
// Handles timer/counter0 overflow.  This interrupts initiates the next
// ADC sample and assumes that the ADC sample will complete before the 
// next timer overflow interrupt.
{
      b8:	1f 92       	push	r1
      ba:	0f 92       	push	r0
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	0f 92       	push	r0
      c0:	11 24       	eor	r1, r1
      c2:	2f 93       	push	r18
      c4:	3f 93       	push	r19
      c6:	4f 93       	push	r20
      c8:	5f 93       	push	r21
      ca:	6f 93       	push	r22
      cc:	7f 93       	push	r23
      ce:	8f 93       	push	r24
      d0:	9f 93       	push	r25
      d2:	af 93       	push	r26
      d4:	bf 93       	push	r27
      d6:	ef 93       	push	r30
      d8:	ff 93       	push	r31
    // Increment the timer when positions are being sampled.
    if (adc_channel == ADC_CHANNEL_POSITION) timer_increment();
      da:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <adc_channel>
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	49 f4       	brne	.+18     	; 0xf4 <__vector_9+0x3c>
static inline void timer_increment(void)
{
    uint16_t value;

    // Read the timer value.
    value = registers_read_word(REG_TIMER_HI, REG_TIMER_LO);
      e2:	67 e0       	ldi	r22, 0x07	; 7
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	17 da       	rcall	.-3026   	; 0xfffff516 <__eeprom_end+0xff7ef516>

    // Increment the timer value.
    ++value;

    // Write the increment timer value.
    registers_write_word(REG_TIMER_HI, REG_TIMER_LO, value);
      e8:	ac 01       	movw	r20, r24
      ea:	4f 5f       	subi	r20, 0xFF	; 255
      ec:	5f 4f       	sbci	r21, 0xFF	; 255
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	86 e0       	ldi	r24, 0x06	; 6
      f2:	23 da       	rcall	.-3002   	; 0xfffff53a <__eeprom_end+0xff7ef53a>

    // Initiate an ADC sample.
    ADCSRA = (1<<ADEN) |                                    // Enable ADC.
      f4:	8e ed       	ldi	r24, 0xDE	; 222
      f6:	86 b9       	out	0x06, r24	; 6
             (1<<ADIF) |                                    // Clear any pending interrupt.
             (1<<ADIE) |                                    // Activate ADC conversion complete interrupt.
             ADPS;											// Prescale -- see above.

    // Reset the counter value to initiate another ADC sample at the specified time.
    TCNT0 = 256 - CRVALUE;
      f8:	82 eb       	ldi	r24, 0xB2	; 178
      fa:	82 bf       	out	0x32, r24	; 50
}
      fc:	ff 91       	pop	r31
      fe:	ef 91       	pop	r30
     100:	bf 91       	pop	r27
     102:	af 91       	pop	r26
     104:	9f 91       	pop	r25
     106:	8f 91       	pop	r24
     108:	7f 91       	pop	r23
     10a:	6f 91       	pop	r22
     10c:	5f 91       	pop	r21
     10e:	4f 91       	pop	r20
     110:	3f 91       	pop	r19
     112:	2f 91       	pop	r18
     114:	0f 90       	pop	r0
     116:	0f be       	out	0x3f, r0	; 63
     118:	0f 90       	pop	r0
     11a:	1f 90       	pop	r1
     11c:	18 95       	reti

0000011e <__vector_14>:

#endif // __AVR_ATmega8__

ISR(ADC_vect)
// Handles ADC interrupt.
{
     11e:	1f 92       	push	r1
     120:	0f 92       	push	r0
     122:	0f b6       	in	r0, 0x3f	; 63
     124:	0f 92       	push	r0
     126:	11 24       	eor	r1, r1
     128:	2f 93       	push	r18
     12a:	3f 93       	push	r19
     12c:	4f 93       	push	r20
     12e:	5f 93       	push	r21
     130:	6f 93       	push	r22
     132:	7f 93       	push	r23
     134:	8f 93       	push	r24
     136:	9f 93       	push	r25
     138:	af 93       	push	r26
     13a:	bf 93       	push	r27
     13c:	ef 93       	push	r30
     13e:	ff 93       	push	r31
    // Read the 10-bit ADC value.
    uint16_t new_value = ADCW;
     140:	44 b1       	in	r20, 0x04	; 4
     142:	55 b1       	in	r21, 0x05	; 5

    // Which channel is being read?
    switch (adc_channel)
     144:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <adc_channel>
     148:	81 30       	cpi	r24, 0x01	; 1
     14a:	21 f0       	breq	.+8      	; 0x154 <__vector_14+0x36>
     14c:	80 f0       	brcs	.+32     	; 0x16e <__vector_14+0x50>
     14e:	82 30       	cpi	r24, 0x02	; 2
     150:	31 f1       	breq	.+76     	; 0x19e <__vector_14+0x80>
     152:	2f c0       	rjmp	.+94     	; 0x1b2 <__vector_14+0x94>
    {

        case ADC_CHANNEL_POSITION:

            // Save the new position value.
            adc_position_value = new_value;
     154:	50 93 38 01 	sts	0x0138, r21	; 0x800138 <adc_position_value+0x1>
     158:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <adc_position_value>

            // Flag the position value as ready.
            adc_position_ready = 1;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <adc_position_ready>

            // Switch to power for the next reading.
            adc_channel = ADC_CHANNEL_POWER;
     162:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <adc_channel>
            ADCSRA |= (1<<ADSC);                                    
#endif

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
            // Set the ADC multiplexer selection register.
            ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     166:	80 e4       	ldi	r24, 0x40	; 64
     168:	87 b9       	out	0x07, r24	; 7
                    (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0) | // Select ADC0 (PC0) as analog input.
                    (0<<ADLAR);                                     // Keep high bits right adjusted.

            // Start the ADC of the power channel now
            ADCSRA |= (1<<ADSC);
     16a:	36 9a       	sbi	0x06, 6	; 6
#endif

            break;
     16c:	22 c0       	rjmp	.+68     	; 0x1b2 <__vector_14+0x94>


        case ADC_CHANNEL_POWER:

            // Save the new power value.
            adc_power_value = new_value;
     16e:	50 93 3a 01 	sts	0x013A, r21	; 0x80013a <adc_power_value+0x1>
     172:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <adc_power_value>

            // Flag the power value as ready.
            adc_power_ready = 1;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <adc_power_ready>
            break;
#endif         
            
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)

            if (adc_voltage_needed)
     17c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <adc_voltage_needed>
     180:	88 23       	and	r24, r24
     182:	39 f0       	breq	.+14     	; 0x192 <__vector_14+0x74>
            {
                // Switch to voltage for the next reading.
                adc_channel = ADC_CHANNEL_VOLTAGE;
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <adc_channel>

                // Set the ADC multiplexer selection register.
                ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     18a:	81 e4       	ldi	r24, 0x41	; 65
     18c:	87 b9       	out	0x07, r24	; 7
                        (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (1<<MUX0) | // Select ADC1 (PC1) as analog input.
                        (0<<ADLAR);                                     // Keep high bits right adjusted.

                // Start the ADC of the voltage channel now
                ADCSRA |= (1<<ADSC);   
     18e:	36 9a       	sbi	0x06, 6	; 6
     190:	10 c0       	rjmp	.+32     	; 0x1b2 <__vector_14+0x94>
            } 
            else 
            {
                // Switch to position for the next reading.
                adc_channel = ADC_CHANNEL_POSITION;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <adc_channel>

                // Set the ADC multiplexer selection register.
                ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     198:	82 e4       	ldi	r24, 0x42	; 66
     19a:	87 b9       	out	0x07, r24	; 7
     19c:	0a c0       	rjmp	.+20     	; 0x1b2 <__vector_14+0x94>

        
        case ADC_CHANNEL_VOLTAGE:
            
            // Remove flag
            adc_voltage_needed = 0;            
     19e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <adc_voltage_needed>

            // Save voltage value to registers
            registers_write_word(REG_VOLTAGE_HI, REG_VOLTAGE_LO, new_value);
     1a2:	65 e1       	ldi	r22, 0x15	; 21
     1a4:	84 e1       	ldi	r24, 0x14	; 20
     1a6:	c9 d9       	rcall	.-3182   	; 0xfffff53a <__eeprom_end+0xff7ef53a>

            // Switch to position for the next reading.
            adc_channel = ADC_CHANNEL_POSITION;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <adc_channel>

            // Set the ADC multiplexer selection register.
            ADMUX = (0<<REFS1) | (1<<REFS0) |                       // Select AVCC as voltage reference.
     1ae:	82 e4       	ldi	r24, 0x42	; 66
     1b0:	87 b9       	out	0x07, r24	; 7
            break;
#endif
            

    }
}
     1b2:	ff 91       	pop	r31
     1b4:	ef 91       	pop	r30
     1b6:	bf 91       	pop	r27
     1b8:	af 91       	pop	r26
     1ba:	9f 91       	pop	r25
     1bc:	8f 91       	pop	r24
     1be:	7f 91       	pop	r23
     1c0:	6f 91       	pop	r22
     1c2:	5f 91       	pop	r21
     1c4:	4f 91       	pop	r20
     1c6:	3f 91       	pop	r19
     1c8:	2f 91       	pop	r18
     1ca:	0f 90       	pop	r0
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	0f 90       	pop	r0
     1d0:	1f 90       	pop	r1
     1d2:	18 95       	reti

000001d4 <curve_init>:
static float curve_b;
static float curve_c;
static float curve_d;

void curve_init(uint16_t t0, uint16_t t1, float p0, float p1, float v0, float v1)
{
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	28 97       	sbiw	r28, 0x08	; 8
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	29 01       	movw	r4, r18
     206:	3a 01       	movw	r6, r20
     208:	e9 82       	std	Y+1, r14	; 0x01
     20a:	fa 82       	std	Y+2, r15	; 0x02
     20c:	0b 83       	std	Y+3, r16	; 0x03
     20e:	1c 83       	std	Y+4, r17	; 0x04
    // Set the time parameters.
    curve_t0 = t0;
     210:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <curve_t0+0x1>
     214:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <curve_t0>
    curve_t1 = t1;
     218:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <curve_t1+0x1>
     21c:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <curve_t1>
    curve_duration = t1 - t0;
     220:	68 1b       	sub	r22, r24
     222:	79 0b       	sbc	r23, r25
     224:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <curve_duration+0x1>
     228:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <curve_duration>
    curve_duration_float = (float) curve_duration;
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	10 dc       	rcall	.-2016   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
     232:	6d 83       	std	Y+5, r22	; 0x05
     234:	7e 83       	std	Y+6, r23	; 0x06
     236:	8f 83       	std	Y+7, r24	; 0x07
     238:	98 87       	std	Y+8, r25	; 0x08
     23a:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <curve_duration_float>
     23e:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <curve_duration_float+0x1>
     242:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <curve_duration_float+0x2>
     246:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <curve_duration_float+0x3>

    // The tangents are expressed as slope of value/time.  The time span will
    // be normalized to 0.0 to 1.0 range so correct the tangents by scaling
    // them by the duration of the curve.
    v0 *= curve_duration_float;
     24a:	a6 01       	movw	r20, r12
     24c:	95 01       	movw	r18, r10
     24e:	8f dc       	rcall	.-1762   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     250:	6b 01       	movw	r12, r22
     252:	7c 01       	movw	r14, r24
    v1 *= curve_duration_float;
     254:	2b 8d       	ldd	r18, Y+27	; 0x1b
     256:	3c 8d       	ldd	r19, Y+28	; 0x1c
     258:	4d 8d       	ldd	r20, Y+29	; 0x1d
     25a:	5e 8d       	ldd	r21, Y+30	; 0x1e
     25c:	6d 81       	ldd	r22, Y+5	; 0x05
     25e:	7e 81       	ldd	r23, Y+6	; 0x06
     260:	8f 81       	ldd	r24, Y+7	; 0x07
     262:	98 85       	ldd	r25, Y+8	; 0x08
     264:	84 dc       	rcall	.-1784   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     266:	4b 01       	movw	r8, r22
     268:	5c 01       	movw	r10, r24

    // Set the curve parameters.
    curve_p0 = p0;
     26a:	40 92 3c 01 	sts	0x013C, r4	; 0x80013c <curve_p0>
     26e:	50 92 3d 01 	sts	0x013D, r5	; 0x80013d <curve_p0+0x1>
     272:	60 92 3e 01 	sts	0x013E, r6	; 0x80013e <curve_p0+0x2>
     276:	70 92 3f 01 	sts	0x013F, r7	; 0x80013f <curve_p0+0x3>
    curve_p1 = p1;
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	9a 81       	ldd	r25, Y+2	; 0x02
     27e:	ab 81       	ldd	r26, Y+3	; 0x03
     280:	bc 81       	ldd	r27, Y+4	; 0x04
     282:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <curve_p1>
     286:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <curve_p1+0x1>
     28a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <curve_p1+0x2>
     28e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <curve_p1+0x3>
    curve_v0 = v0;
     292:	c0 92 4a 01 	sts	0x014A, r12	; 0x80014a <curve_v0>
     296:	d0 92 4b 01 	sts	0x014B, r13	; 0x80014b <curve_v0+0x1>
     29a:	e0 92 4c 01 	sts	0x014C, r14	; 0x80014c <curve_v0+0x2>
     29e:	f0 92 4d 01 	sts	0x014D, r15	; 0x80014d <curve_v0+0x3>
    curve_v1 = v1;
     2a2:	80 92 42 01 	sts	0x0142, r8	; 0x800142 <curve_v1>
     2a6:	90 92 43 01 	sts	0x0143, r9	; 0x800143 <curve_v1+0x1>
     2aa:	a0 92 44 01 	sts	0x0144, r10	; 0x800144 <curve_v1+0x2>
     2ae:	b0 92 45 01 	sts	0x0145, r11	; 0x800145 <curve_v1+0x3>
    // a = 2p0 - 2p1 + v0 + v1
    // b = -3p0 + 3p1 -2v0 - v1
    // c = v0
    // d = p0
    //
    curve_a = (2.0 * p0) - (2.0 * p1) + v0 + v1;
     2b2:	a3 01       	movw	r20, r6
     2b4:	92 01       	movw	r18, r4
     2b6:	c3 01       	movw	r24, r6
     2b8:	b2 01       	movw	r22, r4
     2ba:	ce da       	rcall	.-2660   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     2bc:	6d 83       	std	Y+5, r22	; 0x05
     2be:	7e 83       	std	Y+6, r23	; 0x06
     2c0:	8f 83       	std	Y+7, r24	; 0x07
     2c2:	98 87       	std	Y+8, r25	; 0x08
     2c4:	29 81       	ldd	r18, Y+1	; 0x01
     2c6:	3a 81       	ldd	r19, Y+2	; 0x02
     2c8:	4b 81       	ldd	r20, Y+3	; 0x03
     2ca:	5c 81       	ldd	r21, Y+4	; 0x04
     2cc:	ca 01       	movw	r24, r20
     2ce:	b9 01       	movw	r22, r18
     2d0:	c3 da       	rcall	.-2682   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     2d2:	9b 01       	movw	r18, r22
     2d4:	ac 01       	movw	r20, r24
     2d6:	6d 81       	ldd	r22, Y+5	; 0x05
     2d8:	7e 81       	ldd	r23, Y+6	; 0x06
     2da:	8f 81       	ldd	r24, Y+7	; 0x07
     2dc:	98 85       	ldd	r25, Y+8	; 0x08
     2de:	bb da       	rcall	.-2698   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     2e0:	a7 01       	movw	r20, r14
     2e2:	96 01       	movw	r18, r12
     2e4:	b9 da       	rcall	.-2702   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     2e6:	a5 01       	movw	r20, r10
     2e8:	94 01       	movw	r18, r8
     2ea:	b6 da       	rcall	.-2708   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     2ec:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <curve_a>
     2f0:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <curve_a+0x1>
     2f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <curve_a+0x2>
     2f8:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <curve_a+0x3>
    curve_b = -(3.0 * p0) + (3.0 * p1) - (2.0 * v0) - v1;
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	40 e4       	ldi	r20, 0x40	; 64
     302:	50 e4       	ldi	r21, 0x40	; 64
     304:	69 81       	ldd	r22, Y+1	; 0x01
     306:	7a 81       	ldd	r23, Y+2	; 0x02
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	30 dc       	rcall	.-1952   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     30e:	69 83       	std	Y+1, r22	; 0x01
     310:	7a 83       	std	Y+2, r23	; 0x02
     312:	8b 83       	std	Y+3, r24	; 0x03
     314:	9c 83       	std	Y+4, r25	; 0x04
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e4       	ldi	r20, 0x40	; 64
     31c:	50 e4       	ldi	r21, 0x40	; 64
     31e:	c3 01       	movw	r24, r6
     320:	b2 01       	movw	r22, r4
     322:	25 dc       	rcall	.-1974   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     324:	9b 01       	movw	r18, r22
     326:	ac 01       	movw	r20, r24
     328:	69 81       	ldd	r22, Y+1	; 0x01
     32a:	7a 81       	ldd	r23, Y+2	; 0x02
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
     32e:	9c 81       	ldd	r25, Y+4	; 0x04
     330:	92 da       	rcall	.-2780   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     332:	69 83       	std	Y+1, r22	; 0x01
     334:	7a 83       	std	Y+2, r23	; 0x02
     336:	8b 83       	std	Y+3, r24	; 0x03
     338:	9c 83       	std	Y+4, r25	; 0x04
     33a:	a7 01       	movw	r20, r14
     33c:	96 01       	movw	r18, r12
     33e:	c7 01       	movw	r24, r14
     340:	b6 01       	movw	r22, r12
     342:	8a da       	rcall	.-2796   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     344:	9b 01       	movw	r18, r22
     346:	ac 01       	movw	r20, r24
     348:	69 81       	ldd	r22, Y+1	; 0x01
     34a:	7a 81       	ldd	r23, Y+2	; 0x02
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	82 da       	rcall	.-2812   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     352:	a5 01       	movw	r20, r10
     354:	94 01       	movw	r18, r8
     356:	7f da       	rcall	.-2818   	; 0xfffff856 <__eeprom_end+0xff7ef856>
     358:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <curve_b>
     35c:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <curve_b+0x1>
     360:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <curve_b+0x2>
     364:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <curve_b+0x3>
    curve_c = v0;
     368:	c0 92 64 00 	sts	0x0064, r12	; 0x800064 <curve_c>
     36c:	d0 92 65 00 	sts	0x0065, r13	; 0x800065 <curve_c+0x1>
     370:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <curve_c+0x2>
     374:	f0 92 67 00 	sts	0x0067, r15	; 0x800067 <curve_c+0x3>
    curve_d = p0;
     378:	40 92 60 00 	sts	0x0060, r4	; 0x800060 <_edata>
     37c:	50 92 61 00 	sts	0x0061, r5	; 0x800061 <_edata+0x1>
     380:	60 92 62 00 	sts	0x0062, r6	; 0x800062 <_edata+0x2>
     384:	70 92 63 00 	sts	0x0063, r7	; 0x800063 <_edata+0x3>
}
     388:	28 96       	adiw	r28, 0x08	; 8
     38a:	0f b6       	in	r0, 0x3f	; 63
     38c:	f8 94       	cli
     38e:	de bf       	out	0x3e, r29	; 62
     390:	0f be       	out	0x3f, r0	; 63
     392:	cd bf       	out	0x3d, r28	; 61
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	bf 90       	pop	r11
     3a6:	af 90       	pop	r10
     3a8:	9f 90       	pop	r9
     3aa:	8f 90       	pop	r8
     3ac:	7f 90       	pop	r7
     3ae:	6f 90       	pop	r6
     3b0:	5f 90       	pop	r5
     3b2:	4f 90       	pop	r4
     3b4:	08 95       	ret

000003b6 <curve_solve>:


void curve_solve(uint16_t t, float *x, float *dx)
{
     3b6:	4f 92       	push	r4
     3b8:	5f 92       	push	r5
     3ba:	6f 92       	push	r6
     3bc:	7f 92       	push	r7
     3be:	8f 92       	push	r8
     3c0:	9f 92       	push	r9
     3c2:	af 92       	push	r10
     3c4:	bf 92       	push	r11
     3c6:	cf 92       	push	r12
     3c8:	df 92       	push	r13
     3ca:	ef 92       	push	r14
     3cc:	ff 92       	push	r15
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
     3da:	62 97       	sbiw	r28, 0x12	; 18
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	cd bf       	out	0x3d, r28	; 61
    // Handle cases where t is outside and indise the curve.
    if (t <= curve_t0)
     3e6:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <curve_t0>
     3ea:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <curve_t0+0x1>
     3ee:	28 17       	cp	r18, r24
     3f0:	39 07       	cpc	r19, r25
     3f2:	38 f1       	brcs	.+78     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
    {
        // Set x and in and out dx.
        *x = curve_p0;
     3f4:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <curve_p0>
     3f8:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <curve_p0+0x1>
     3fc:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <curve_p0+0x2>
     400:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <curve_p0+0x3>
     404:	db 01       	movw	r26, r22
     406:	0d 93       	st	X+, r16
     408:	1d 93       	st	X+, r17
     40a:	2d 93       	st	X+, r18
     40c:	3c 93       	st	X, r19
     40e:	13 97       	sbiw	r26, 0x03	; 3
        *dx = t < curve_t0 ? 0.0 : curve_v0;
     410:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <curve_t0>
     414:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <curve_t0+0x1>
     418:	82 17       	cp	r24, r18
     41a:	93 07       	cpc	r25, r19
     41c:	48 f0       	brcs	.+18     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     41e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <curve_v0>
     422:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <curve_v0+0x1>
     426:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <curve_v0+0x2>
     42a:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <curve_v0+0x3>
     42e:	03 c0       	rjmp	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	dc 01       	movw	r26, r24
     436:	fa 01       	movw	r30, r20
     438:	80 83       	st	Z, r24
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	a2 83       	std	Z+2, r26	; 0x02
     43e:	b3 83       	std	Z+3, r27	; 0x03
     440:	d9 c0       	rjmp	.+434    	; 0x5f4 <__stack+0x195>
    }
    else if (t >= curve_t1)
     442:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <curve_t1>
     446:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <curve_t1+0x1>
     44a:	8e 17       	cp	r24, r30
     44c:	9f 07       	cpc	r25, r31
     44e:	38 f1       	brcs	.+78     	; 0x49e <__stack+0x3f>
    {
        // Set x and in and out dx.
        *x = curve_p1;
     450:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <curve_p1>
     454:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <curve_p1+0x1>
     458:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <curve_p1+0x2>
     45c:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <curve_p1+0x3>
     460:	db 01       	movw	r26, r22
     462:	0d 93       	st	X+, r16
     464:	1d 93       	st	X+, r17
     466:	2d 93       	st	X+, r18
     468:	3c 93       	st	X, r19
     46a:	13 97       	sbiw	r26, 0x03	; 3
        *dx = t > curve_t1 ? 0.0 : curve_v1;
     46c:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <curve_t1>
     470:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <curve_t1+0x1>
     474:	28 17       	cp	r18, r24
     476:	39 07       	cpc	r19, r25
     478:	48 f0       	brcs	.+18     	; 0x48c <__stack+0x2d>
     47a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <curve_v1>
     47e:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <curve_v1+0x1>
     482:	a0 91 44 01 	lds	r26, 0x0144	; 0x800144 <curve_v1+0x2>
     486:	b0 91 45 01 	lds	r27, 0x0145	; 0x800145 <curve_v1+0x3>
     48a:	03 c0       	rjmp	.+6      	; 0x492 <__stack+0x33>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	dc 01       	movw	r26, r24
     492:	fa 01       	movw	r30, r20
     494:	80 83       	st	Z, r24
     496:	91 83       	std	Z+1, r25	; 0x01
     498:	a2 83       	std	Z+2, r26	; 0x02
     49a:	b3 83       	std	Z+3, r27	; 0x03
     49c:	ab c0       	rjmp	.+342    	; 0x5f4 <__stack+0x195>
     49e:	8a 01       	movw	r16, r20
     4a0:	7a 8b       	std	Y+18, r23	; 0x12
     4a2:	69 8b       	std	Y+17, r22	; 0x11
     4a4:	bc 01       	movw	r22, r24
    }
    else
    {
        // Subtract out the t0 value from t.
        float t1 = ((float) (t - curve_t0)) / curve_duration_float;
     4a6:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <curve_duration_float>
     4aa:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <curve_duration_float+0x1>
     4ae:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <curve_duration_float+0x2>
     4b2:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <curve_duration_float+0x3>
     4b6:	62 1b       	sub	r22, r18
     4b8:	73 0b       	sbc	r23, r19
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	c9 da       	rcall	.-2670   	; 0xfffffa52 <__eeprom_end+0xff7efa52>
     4c0:	a7 01       	movw	r20, r14
     4c2:	96 01       	movw	r18, r12
     4c4:	2d da       	rcall	.-2982   	; 0xfffff920 <__eeprom_end+0xff7ef920>
     4c6:	69 83       	std	Y+1, r22	; 0x01
     4c8:	7a 83       	std	Y+2, r23	; 0x02
     4ca:	8b 83       	std	Y+3, r24	; 0x03
     4cc:	9c 83       	std	Y+4, r25	; 0x04
        float t2 = t1 * t1;
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	4d db       	rcall	.-2406   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     4d4:	6d 83       	std	Y+5, r22	; 0x05
     4d6:	7e 83       	std	Y+6, r23	; 0x06
     4d8:	8f 83       	std	Y+7, r24	; 0x07
     4da:	98 87       	std	Y+8, r25	; 0x08
        float t3 = t2 * t1;

        // Determine the cubic polynomial.
        // x = at^3 + bt^2 + ct + d
        *x = (curve_a * t3) + (curve_b * t2) + (curve_c * t1) + curve_d;
     4dc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <curve_a>
     4e0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <curve_a+0x1>
     4e4:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <curve_a+0x2>
     4e8:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <curve_a+0x3>
     4ec:	8d 87       	std	Y+13, r24	; 0x0d
     4ee:	9e 87       	std	Y+14, r25	; 0x0e
     4f0:	af 87       	std	Y+15, r26	; 0x0f
     4f2:	b8 8b       	std	Y+16, r27	; 0x10
     4f4:	40 90 68 00 	lds	r4, 0x0068	; 0x800068 <curve_b>
     4f8:	50 90 69 00 	lds	r5, 0x0069	; 0x800069 <curve_b+0x1>
     4fc:	60 90 6a 00 	lds	r6, 0x006A	; 0x80006a <curve_b+0x2>
     500:	70 90 6b 00 	lds	r7, 0x006B	; 0x80006b <curve_b+0x3>
     504:	80 90 64 00 	lds	r8, 0x0064	; 0x800064 <curve_c>
     508:	90 90 65 00 	lds	r9, 0x0065	; 0x800065 <curve_c+0x1>
     50c:	a0 90 66 00 	lds	r10, 0x0066	; 0x800066 <curve_c+0x2>
     510:	b0 90 67 00 	lds	r11, 0x0067	; 0x800067 <curve_c+0x3>
     514:	2d 81       	ldd	r18, Y+5	; 0x05
     516:	3e 81       	ldd	r19, Y+6	; 0x06
     518:	4f 81       	ldd	r20, Y+7	; 0x07
     51a:	58 85       	ldd	r21, Y+8	; 0x08
     51c:	69 81       	ldd	r22, Y+1	; 0x01
     51e:	7a 81       	ldd	r23, Y+2	; 0x02
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	24 db       	rcall	.-2488   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     526:	2d 85       	ldd	r18, Y+13	; 0x0d
     528:	3e 85       	ldd	r19, Y+14	; 0x0e
     52a:	4f 85       	ldd	r20, Y+15	; 0x0f
     52c:	58 89       	ldd	r21, Y+16	; 0x10
     52e:	1f db       	rcall	.-2498   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     530:	69 87       	std	Y+9, r22	; 0x09
     532:	7a 87       	std	Y+10, r23	; 0x0a
     534:	8b 87       	std	Y+11, r24	; 0x0b
     536:	9c 87       	std	Y+12, r25	; 0x0c
     538:	a3 01       	movw	r20, r6
     53a:	92 01       	movw	r18, r4
     53c:	6d 81       	ldd	r22, Y+5	; 0x05
     53e:	7e 81       	ldd	r23, Y+6	; 0x06
     540:	8f 81       	ldd	r24, Y+7	; 0x07
     542:	98 85       	ldd	r25, Y+8	; 0x08
     544:	14 db       	rcall	.-2520   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
     54a:	69 85       	ldd	r22, Y+9	; 0x09
     54c:	7a 85       	ldd	r23, Y+10	; 0x0a
     54e:	8b 85       	ldd	r24, Y+11	; 0x0b
     550:	9c 85       	ldd	r25, Y+12	; 0x0c
     552:	82 d9       	rcall	.-3324   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     554:	69 87       	std	Y+9, r22	; 0x09
     556:	7a 87       	std	Y+10, r23	; 0x0a
     558:	8b 87       	std	Y+11, r24	; 0x0b
     55a:	9c 87       	std	Y+12, r25	; 0x0c
     55c:	a5 01       	movw	r20, r10
     55e:	94 01       	movw	r18, r8
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	7a 81       	ldd	r23, Y+2	; 0x02
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	02 db       	rcall	.-2556   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	69 85       	ldd	r22, Y+9	; 0x09
     570:	7a 85       	ldd	r23, Y+10	; 0x0a
     572:	8b 85       	ldd	r24, Y+11	; 0x0b
     574:	9c 85       	ldd	r25, Y+12	; 0x0c
     576:	70 d9       	rcall	.-3360   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     578:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
     57c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <_edata+0x1>
     580:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_edata+0x2>
     584:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_edata+0x3>
     588:	67 d9       	rcall	.-3378   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     58a:	a9 89       	ldd	r26, Y+17	; 0x11
     58c:	ba 89       	ldd	r27, Y+18	; 0x12
     58e:	6d 93       	st	X+, r22
     590:	7d 93       	st	X+, r23
     592:	8d 93       	st	X+, r24
     594:	9c 93       	st	X, r25
     596:	13 97       	sbiw	r26, 0x03	; 3
        // dx = 3at^2 + 2bt + c
        *dx = (3.0 * curve_a * t2) + (2.0 * curve_b * t1) + curve_c;

        // The time span has been normalized to 0.0 to 1.0 range so correct
        // the derivative to the duration of the curve.
        *dx /= curve_duration_float;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e4       	ldi	r20, 0x40	; 64
     59e:	50 e4       	ldi	r21, 0x40	; 64
     5a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     5a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     5a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5a6:	98 89       	ldd	r25, Y+16	; 0x10
     5a8:	e2 da       	rcall	.-2620   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     5aa:	2d 81       	ldd	r18, Y+5	; 0x05
     5ac:	3e 81       	ldd	r19, Y+6	; 0x06
     5ae:	4f 81       	ldd	r20, Y+7	; 0x07
     5b0:	58 85       	ldd	r21, Y+8	; 0x08
     5b2:	dd da       	rcall	.-2630   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     5b4:	6d 83       	std	Y+5, r22	; 0x05
     5b6:	7e 83       	std	Y+6, r23	; 0x06
     5b8:	8f 83       	std	Y+7, r24	; 0x07
     5ba:	98 87       	std	Y+8, r25	; 0x08
     5bc:	a3 01       	movw	r20, r6
     5be:	92 01       	movw	r18, r4
     5c0:	c3 01       	movw	r24, r6
     5c2:	b2 01       	movw	r22, r4
     5c4:	49 d9       	rcall	.-3438   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     5c6:	29 81       	ldd	r18, Y+1	; 0x01
     5c8:	3a 81       	ldd	r19, Y+2	; 0x02
     5ca:	4b 81       	ldd	r20, Y+3	; 0x03
     5cc:	5c 81       	ldd	r21, Y+4	; 0x04
     5ce:	cf da       	rcall	.-2658   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     5d0:	9b 01       	movw	r18, r22
     5d2:	ac 01       	movw	r20, r24
     5d4:	6d 81       	ldd	r22, Y+5	; 0x05
     5d6:	7e 81       	ldd	r23, Y+6	; 0x06
     5d8:	8f 81       	ldd	r24, Y+7	; 0x07
     5da:	98 85       	ldd	r25, Y+8	; 0x08
     5dc:	3d d9       	rcall	.-3462   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	3a d9       	rcall	.-3468   	; 0xfffff858 <__eeprom_end+0xff7ef858>
     5e4:	a7 01       	movw	r20, r14
     5e6:	96 01       	movw	r18, r12
     5e8:	9b d9       	rcall	.-3274   	; 0xfffff920 <__eeprom_end+0xff7ef920>
     5ea:	f8 01       	movw	r30, r16
     5ec:	60 83       	st	Z, r22
     5ee:	71 83       	std	Z+1, r23	; 0x01
     5f0:	82 83       	std	Z+2, r24	; 0x02
     5f2:	93 83       	std	Z+3, r25	; 0x03
    }
}
     5f4:	62 96       	adiw	r28, 0x12	; 18
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	cf 90       	pop	r12
     610:	bf 90       	pop	r11
     612:	af 90       	pop	r10
     614:	9f 90       	pop	r9
     616:	8f 90       	pop	r8
     618:	7f 90       	pop	r7
     61a:	6f 90       	pop	r6
     61c:	5f 90       	pop	r5
     61e:	4f 90       	pop	r4
     620:	08 95       	ret

00000622 <eeprom_erase>:
}


uint8_t eeprom_erase(void)
// Erase the entire EEPROM.
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	60 97       	sbiw	r28, 0x10	; 16
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
    uint8_t buffer[16];

    // XXX Disable PWM to servo motor while reading registers.

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));
     63a:	40 e1       	ldi	r20, 0x10	; 16
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	6f ef       	ldi	r22, 0xFF	; 255
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	34 db       	rcall	.-2456   	; 0xfffffcb0 <__eeprom_end+0xff7efcb0>

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
     648:	00 e0       	ldi	r16, 0x00	; 0
     64a:	10 e0       	ldi	r17, 0x00	; 0
    {
        // Write the buffer to the block of EEPROM.
        eeprom_write_block(buffer, (void *) i, sizeof(buffer));
     64c:	40 e1       	ldi	r20, 0x10	; 16
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	b8 01       	movw	r22, r16
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	43 db       	rcall	.-2426   	; 0xfffffcde <__eeprom_end+0xff7efcde>

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
     658:	00 5f       	subi	r16, 0xF0	; 240
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	01 15       	cp	r16, r1
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	18 07       	cpc	r17, r24
     662:	a1 f7       	brne	.-24     	; 0x64c <eeprom_erase+0x2a>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	60 96       	adiw	r28, 0x10	; 16
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	08 95       	ret

0000067c <eeprom_restore_registers>:


uint8_t eeprom_restore_registers(void)
// Restore registers from EEPROM.  Returns 1 if success or 0 if the registers failed 
// checksum.  Upon failure the caller should initialize the registers to defaults.
{
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	00 d0       	rcall	.+0      	; 0x682 <eeprom_restore_registers+0x6>
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Read EEPROM header which is the first two bytes of EEPROM.
    eeprom_read_block(&header[0], (void *) 0, 2);
     686:	42 e0       	ldi	r20, 0x02	; 2
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	ce 01       	movw	r24, r28
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	15 db       	rcall	.-2518   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>

    // Does the version match?
    if (header[0] != EEPROM_VERSION) return 0;
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	83 30       	cpi	r24, 0x03	; 3
     698:	b1 f4       	brne	.+44     	; 0x6c6 <eeprom_restore_registers+0x4a>

    // Read the write protected and redirect registers from EEPROM.
    eeprom_read_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT);
     69a:	48 e2       	ldi	r20, 0x28	; 40
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	62 e0       	ldi	r22, 0x02	; 2
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	8c e7       	ldi	r24, 0x7C	; 124
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0b db       	rcall	.-2538   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>

    // Does the checksum match?
    if (header[1] != eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     6a8:	2a 81       	ldd	r18, Y+2	; 0x02
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	ec e7       	ldi	r30, 0x7C	; 124
     6ae:	f1 e0       	ldi	r31, 0x01	; 1
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     6b0:	81 91       	ld	r24, Z+
     6b2:	98 0f       	add	r25, r24

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	e4 3a       	cpi	r30, 0xA4	; 164
     6b8:	f8 07       	cpc	r31, r24
     6ba:	d1 f7       	brne	.-12     	; 0x6b0 <eeprom_restore_registers+0x34>

    // Read EEPROM header which is the first two bytes of EEPROM.
    eeprom_read_block(&header[0], (void *) 0, 2);

    // Does the version match?
    if (header[0] != EEPROM_VERSION) return 0;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	29 17       	cp	r18, r25
     6c0:	19 f0       	breq	.+6      	; 0x6c8 <eeprom_restore_registers+0x4c>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <eeprom_restore_registers+0x4c>
     6c6:	80 e0       	ldi	r24, 0x00	; 0

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <eeprom_save_registers>:


uint8_t eeprom_save_registers(void)
// Save registers to EEPROM.
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <eeprom_save_registers+0x6>
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	ec e7       	ldi	r30, 0x7C	; 124
     6e2:	f1 e0       	ldi	r31, 0x01	; 1
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     6e4:	91 91       	ld	r25, Z+
     6e6:	89 0f       	add	r24, r25

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	e4 3a       	cpi	r30, 0xA4	; 164
     6ec:	f9 07       	cpc	r31, r25
     6ee:	d1 f7       	brne	.-12     	; 0x6e4 <eeprom_save_registers+0x12>

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
    header[1] = eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, EEPROM_VERSION);
     6f0:	8a 83       	std	Y+2, r24	; 0x02

    // Write the EEPROM header which is the first two bytes of EEPROM.
    eeprom_write_block(&header[0], (void *) 0, 2);
     6f2:	42 e0       	ldi	r20, 0x02	; 2
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	ef da       	rcall	.-2594   	; 0xfffffcde <__eeprom_end+0xff7efcde>

    // Write the write protected and redirect registers from EEPROM.
    eeprom_write_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT);
     700:	48 e2       	ldi	r20, 0x28	; 40
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	8c e7       	ldi	r24, 0x7C	; 124
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	e8 da       	rcall	.-2608   	; 0xfffffcde <__eeprom_end+0xff7efcde>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	08 95       	ret

0000071a <main>:
// AVR MCU pins have a defined level.  We do this by configuring unused pins
// as inputs and enabling the internal pull-ups.
{
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
    // Configure unused port B pins as inputs and enable internal pull-up resistor.
    DDRB = (0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) |
     71a:	86 e0       	ldi	r24, 0x06	; 6
     71c:	87 bb       	out	0x17, r24	; 23
           (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
    PORTB = (1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) |
     71e:	89 ef       	ldi	r24, 0xF9	; 249
     720:	88 bb       	out	0x18, r24	; 24
            (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (1<<PORTB0);

    // Configure unused port C pins as inputs and enable internal pull-up resistor.
    DDRC = (0<<DDC6) | (0<<DDC5) | (0<<DDC4) |
     722:	14 ba       	out	0x14, r1	; 20
           (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
    PORTC = (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) |
     724:	8f e7       	ldi	r24, 0x7F	; 127
     726:	85 bb       	out	0x15, r24	; 21
            (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);

    // Configure port D pins as inputs and enable internal pull-up resistor.
    DDRD = (0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) |
     728:	11 ba       	out	0x11, r1	; 17
           (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
    PORTD = (1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) |
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	82 bb       	out	0x12, r24	; 18
{
	// Configure pins to the default states.
	config_pin_defaults();

    // Initialize the watchdog module.
    watchdog_init();
     72e:	85 d8       	rcall	.-3830   	; 0xfffff83a <__eeprom_end+0xff7ef83a>

    // First, initialize registers that control servo operation.
    registers_init();
     730:	da d6       	rcall	.+3508   	; 0x14e6 <registers_init>

    // Initialize the PWM module.
    pwm_init();
     732:	3a d5       	rcall	.+2676   	; 0x11a8 <pwm_init>

    // Initialize the ADC module.
    adc_init();
     734:	9e dc       	rcall	.-1732   	; 0x72 <adc_init>
    regulator_init();
#endif

#if PID_MOTION_ENABLED
    // Initialize the PID algorithm module.
    pid_init();
     736:	66 d3       	rcall	.+1740   	; 0xe04 <pid_init>
    ipd_init();
#endif

#if CURVE_MOTION_ENABLED
    // Initialize curve motion module.
    motion_init();
     738:	b6 d0       	rcall	.+364    	; 0x8a6 <motion_init>
#endif

    // Initialize the power module.
    power_init();
     73a:	fa d4       	rcall	.+2548   	; 0x1130 <power_init>
#if PULSE_CONTROL_ENABLED
    pulse_control_init();
#endif

    // Initialize the TWI slave module.
    twi_slave_init(registers_read_byte(REG_TWI_ADDRESS));
     73c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <registers+0x20>
     740:	58 d7       	rcall	.+3760   	; 0x15f2 <twi_slave_init>
#include "registers.h"

static inline void timer_set(uint16_t value)
{
    // Set the timer to the specified value.
    registers_write_word(REG_TIMER_HI, REG_TIMER_LO, value);
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	67 e0       	ldi	r22, 0x07	; 7
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	f7 d6       	rcall	.+3566   	; 0x153a <registers_write_word>

    // Finally initialize the timer.
    timer_set(0);

    // Enable interrupts.
    sei();
     74c:	78 94       	sei

inline static uint8_t adc_position_value_is_ready(void)
// Return the ADC position value ready flag.
{
    // Return the value ready flag.
    return adc_position_ready;
     74e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <adc_position_ready>

    // Wait until initial position value is ready.
    while (!adc_position_value_is_ready());
     752:	88 23       	and	r24, r24
     754:	e1 f3       	breq	.-8      	; 0x74e <main+0x34>

inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
     756:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_position_ready>

    // Return the value.
    return adc_position_value;
     75a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <adc_position_value>
     75e:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <adc_position_value+0x1>

#if CURVE_MOTION_ENABLED
    // Reset the curve motion with the current position of the servo.
    motion_reset(adc_get_position_value());
     762:	ef d0       	rcall	.+478    	; 0x942 <motion_reset>

inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
     764:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_position_ready>

    // Return the value.
    return adc_position_value;
     768:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <adc_position_value>
     76c:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <adc_position_value+0x1>
#endif

    // Set the initial seek position and velocity.
    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, adc_get_position_value());
     770:	61 e1       	ldi	r22, 0x11	; 17
     772:	80 e1       	ldi	r24, 0x10	; 16
     774:	e2 d6       	rcall	.+3524   	; 0x153a <registers_write_word>
    registers_write_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO, 0);
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	63 e1       	ldi	r22, 0x13	; 19
     77c:	82 e1       	ldi	r24, 0x12	; 18
     77e:	dd d6       	rcall	.+3514   	; 0x153a <registers_write_word>


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
     780:	ec e5       	ldi	r30, 0x5C	; 92
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	85 81       	ldd	r24, Z+5	; 0x05
     786:	83 60       	ori	r24, 0x03	; 3
     788:	85 83       	std	Z+5, r24	; 0x05
     78a:	8f 01       	movw	r16, r30
}

inline static void adc_read_voltage(void) 
// Set a flag to start a adc on supply voltage channel.
{
    adc_voltage_needed = 1;
     78c:	ff 24       	eor	r15, r15
     78e:	f3 94       	inc	r15

inline static uint8_t adc_position_value_is_ready(void)
// Return the ADC position value ready flag.
{
    // Return the value ready flag.
    return adc_position_ready;
     790:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <adc_position_ready>
    // This is the main processing loop for the servo.  It basically looks
    // for new position, power or TWI commands to be processed.
    for (;;)
    {
        // Is position value ready?
        if (adc_position_value_is_ready())
     794:	88 23       	and	r24, r24
     796:	71 f0       	breq	.+28     	; 0x7b4 <main+0x9a>
            pulse_control_update();
#endif

#if CURVE_MOTION_ENABLED
            // Give the motion curve a chance to update the seek position and velocity.
            motion_next(10);
     798:	8a e0       	ldi	r24, 0x0A	; 10
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	d7 d1       	rcall	.+942    	; 0xb4c <motion_next>

inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
     79e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_position_ready>

    // Return the value.
    return adc_position_value;
     7a2:	c0 91 37 01 	lds	r28, 0x0137	; 0x800137 <adc_position_value>
     7a6:	d0 91 38 01 	lds	r29, 0x0138	; 0x800138 <adc_position_value+0x1>
            estimate_velocity(position);
#endif

#if PID_MOTION_ENABLED
            // Call the PID algorithm module to get a new PWM value.
            pwm = pid_position_to_pwm(position);
     7aa:	ce 01       	movw	r24, r28
     7ac:	56 d3       	rcall	.+1708   	; 0xe5a <pid_position_to_pwm>
            pwm = regulator_position_to_pwm(position);
#endif

            // Update the servo movement as indicated by the PWM value.
            // Sanity checks are performed against the position value.
            pwm_update(position, pwm);
     7ae:	bc 01       	movw	r22, r24
     7b0:	ce 01       	movw	r24, r28
     7b2:	54 d5       	rcall	.+2728   	; 0x125c <pwm_update>

inline static uint8_t adc_power_value_is_ready(void)
// Return the ADC power value ready flag.
{
    // Return the value ready flag.
    return adc_power_ready;
     7b4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <adc_power_ready>
        }

        // Is a power value ready?
        if (adc_power_value_is_ready())
     7b8:	88 23       	and	r24, r24
     7ba:	39 f0       	breq	.+14     	; 0x7ca <main+0xb0>

inline static uint16_t adc_get_power_value(void)
// Return the signed 16-bit ADC power value.
{
    // Clear the ready ADC value ready flag.
    adc_power_ready = 0;
     7bc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <adc_power_ready>

    // Return the value.
    return adc_power_value;
     7c0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <adc_power_value>
     7c4:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <adc_power_value+0x1>
        {
            // Get the new power value.
            uint16_t power = adc_get_power_value();

            // Update the power value for reporting.
            power_update(power);
     7c8:	c4 d4       	rcall	.+2440   	; 0x1152 <power_update>
        }

        // Was a command recieved?
        if (twi_data_in_receive_buffer())
     7ca:	31 d7       	rcall	.+3682   	; 0x162e <twi_data_in_receive_buffer>
     7cc:	88 23       	and	r24, r24
     7ce:	01 f3       	breq	.-64     	; 0x790 <main+0x76>
static void handle_twi_command(void)
{
    uint8_t command;

    // Get the command from the receive buffer.
    command = twi_receive_byte();
     7d0:	1b d7       	rcall	.+3638   	; 0x1608 <twi_receive_byte>

    switch (command)
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	e0 58       	subi	r30, 0x80	; 128
     7d8:	f1 09       	sbc	r31, r1
     7da:	e5 31       	cpi	r30, 0x15	; 21
     7dc:	f1 05       	cpc	r31, r1
     7de:	c0 f6       	brcc	.-80     	; 0x790 <main+0x76>
     7e0:	ed 5e       	subi	r30, 0xED	; 237
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	09 94       	ijmp
    {
        case TWI_CMD_RESET:

            // Reset the servo.
            watchdog_hard_reset();
     7e6:	2e d8       	rcall	.-4004   	; 0xfffff844 <__eeprom_end+0xff7ef844>
     7e8:	d3 cf       	rjmp	.-90     	; 0x790 <main+0x76>
     7ea:	f8 01       	movw	r30, r16
     7ec:	85 81       	ldd	r24, Z+5	; 0x05
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	85 83       	std	Z+5, r24	; 0x05
     7f2:	ce cf       	rjmp	.-100    	; 0x790 <main+0x76>
     7f4:	f8 01       	movw	r30, r16
     7f6:	85 81       	ldd	r24, Z+5	; 0x05
     7f8:	8e 7f       	andi	r24, 0xFE	; 254
     7fa:	85 83       	std	Z+5, r24	; 0x05

    // Disable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_PWM_ENABLED));

    // Stop now!
    pwm_stop();
     7fc:	04 d5       	rcall	.+2568   	; 0x1206 <pwm_stop>
     7fe:	c8 cf       	rjmp	.-112    	; 0x790 <main+0x76>
     800:	f8 01       	movw	r30, r16
     802:	85 81       	ldd	r24, Z+5	; 0x05
     804:	82 60       	ori	r24, 0x02	; 2
     806:	85 83       	std	Z+5, r24	; 0x05
     808:	c3 cf       	rjmp	.-122    	; 0x790 <main+0x76>
     80a:	f8 01       	movw	r30, r16
     80c:	85 81       	ldd	r24, Z+5	; 0x05
     80e:	8d 7f       	andi	r24, 0xFD	; 253
     810:	85 83       	std	Z+5, r24	; 0x05
     812:	be cf       	rjmp	.-132    	; 0x790 <main+0x76>
            break;

        case TWI_CMD_REGISTERS_SAVE:

            // Save register values into EEPROM.
            eeprom_save_registers();
     814:	5e df       	rcall	.-324    	; 0x6d2 <eeprom_save_registers>
     816:	bc cf       	rjmp	.-136    	; 0x790 <main+0x76>
            break;

        case TWI_CMD_REGISTERS_RESTORE:

            // Restore register values into EEPROM.
            eeprom_restore_registers();
     818:	31 df       	rcall	.-414    	; 0x67c <eeprom_restore_registers>
     81a:	ba cf       	rjmp	.-140    	; 0x790 <main+0x76>
            break;

        case TWI_CMD_REGISTERS_DEFAULT:

            // Restore register values to factory defaults.
            registers_defaults();
     81c:	5e d6       	rcall	.+3260   	; 0x14da <registers_defaults>
     81e:	b8 cf       	rjmp	.-144    	; 0x790 <main+0x76>
            break;

        case TWI_CMD_EEPROM_ERASE:

            // Erase the EEPROM.
            eeprom_erase();
     820:	00 df       	rcall	.-512    	; 0x622 <eeprom_erase>
     822:	b6 cf       	rjmp	.-148    	; 0x790 <main+0x76>
}

inline static void adc_read_voltage(void) 
// Set a flag to start a adc on supply voltage channel.
{
    adc_voltage_needed = 1;
     824:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <adc_voltage_needed>
     828:	b3 cf       	rjmp	.-154    	; 0x790 <main+0x76>
     82a:	f8 01       	movw	r30, r16
     82c:	85 81       	ldd	r24, Z+5	; 0x05
     82e:	84 60       	ori	r24, 0x04	; 4
     830:	85 83       	std	Z+5, r24	; 0x05
     832:	ae cf       	rjmp	.-164    	; 0x790 <main+0x76>
     834:	f8 01       	movw	r30, r16
     836:	85 81       	ldd	r24, Z+5	; 0x05
     838:	8b 7f       	andi	r24, 0xFB	; 251
     83a:	85 83       	std	Z+5, r24	; 0x05
     83c:	a9 cf       	rjmp	.-174    	; 0x790 <main+0x76>

inline static uint16_t adc_get_position_value(void)
// Return the 16-bit ADC position value.
{
    // Clear the ready ADC value ready flag.
    adc_position_ready = 0;
     83e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_position_ready>

    // Return the value.
    return adc_position_value;
     842:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <adc_position_value>
     846:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <adc_position_value+0x1>
            break;

        case TWI_CMD_CURVE_MOTION_RESET:

            // Reset the motion to the current position.
            motion_reset(adc_get_position_value());
     84a:	7b d0       	rcall	.+246    	; 0x942 <motion_reset>
     84c:	a1 cf       	rjmp	.-190    	; 0x790 <main+0x76>
            break;

        case TWI_CMD_CURVE_MOTION_APPEND:

            // Append motion curve data stored in the registers.
            motion_append();
     84e:	cc d0       	rcall	.+408    	; 0x9e8 <motion_append>
     850:	9f cf       	rjmp	.-194    	; 0x790 <main+0x76>

00000852 <motion_buffer_left>:
// returns how many keypoints remain free in the buffer for use.
{
    uint8_t space_left;

    // Determine the points left to store curve data.
    if (motion_head < motion_tail)
     852:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <motion_head>
     856:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <motion_tail>
     85a:	98 17       	cp	r25, r24
     85c:	18 f4       	brcc	.+6      	; 0x864 <motion_buffer_left+0x12>
    {
        space_left = (MOTION_BUFFER_SIZE - 1) - (MOTION_BUFFER_SIZE + motion_head - motion_tail);
     85e:	81 50       	subi	r24, 0x01	; 1
     860:	89 1b       	sub	r24, r25
     862:	08 95       	ret
    }
    else
    {
        space_left = (MOTION_BUFFER_SIZE - 1) - (motion_head - motion_tail);
     864:	89 5f       	subi	r24, 0xF9	; 249
     866:	89 1b       	sub	r24, r25
    }

    return space_left;
}
     868:	08 95       	ret

0000086a <motion_registers_reset>:
}


void motion_registers_reset(void)
// Reset the motion registers to zero values.
{
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
    // Set the default position, velocity and delta data.
    registers_write_word(REG_CURVE_POSITION_HI, REG_CURVE_POSITION_LO, 0);
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	6b e1       	ldi	r22, 0x1B	; 27
     874:	8a e1       	ldi	r24, 0x1A	; 26
     876:	61 d6       	rcall	.+3266   	; 0x153a <registers_write_word>
    registers_write_word(REG_CURVE_IN_VELOCITY_HI, REG_CURVE_IN_VELOCITY_LO, 0);
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	6d e1       	ldi	r22, 0x1D	; 29
     87e:	8c e1       	ldi	r24, 0x1C	; 28
     880:	5c d6       	rcall	.+3256   	; 0x153a <registers_write_word>
    registers_write_word(REG_CURVE_OUT_VELOCITY_HI, REG_CURVE_OUT_VELOCITY_LO, 0);
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	6f e1       	ldi	r22, 0x1F	; 31
     888:	8e e1       	ldi	r24, 0x1E	; 30
     88a:	57 d6       	rcall	.+3246   	; 0x153a <registers_write_word>
    registers_write_word(REG_CURVE_DELTA_HI, REG_CURVE_DELTA_LO, 0);
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	50 e0       	ldi	r21, 0x00	; 0
     890:	69 e1       	ldi	r22, 0x19	; 25
     892:	88 e1       	ldi	r24, 0x18	; 24
     894:	52 d6       	rcall	.+3236   	; 0x153a <registers_write_word>
     896:	cc e5       	ldi	r28, 0x5C	; 92
     898:	d1 e0       	ldi	r29, 0x01	; 1
     89a:	1e 8a       	std	Y+22, r1	; 0x16

    // Update the buffer status.
    registers_write_byte(REG_CURVE_RESERVED, 0);
    registers_write_byte(REG_CURVE_BUFFER, motion_buffer_left());
     89c:	da df       	rcall	.-76     	; 0x852 <motion_buffer_left>
     89e:	8f 8b       	std	Y+23, r24	; 0x17
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <motion_init>:
#endif


void motion_init(void)
// Initialize the curve buffer.
{
     8a6:	af 92       	push	r10
     8a8:	bf 92       	push	r11
     8aa:	cf 92       	push	r12
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
    // Initialize the counter.
    motion_counter = 0;
     8b6:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <motion_counter>
     8ba:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <motion_counter+0x1>
     8be:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <motion_counter+0x2>
     8c2:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <motion_counter+0x3>

    // Initialize the duration.
    motion_duration = 0;
     8c6:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <motion_duration>
     8ca:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <motion_duration+0x1>
     8ce:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <motion_duration+0x2>
     8d2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motion_duration+0x3>

    // Initialize the queue.
    motion_head = 0;
     8d6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motion_head>
    motion_tail = 0;
     8da:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <motion_tail>

    // Initialize the keypoint.
    keys[0].delta = 0;
     8de:	e4 e7       	ldi	r30, 0x74	; 116
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	11 82       	std	Z+1, r1	; 0x01
     8e4:	10 82       	st	Z, r1
    keys[0].position = 512.0;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	b4 e4       	ldi	r27, 0x44	; 68
     8ee:	82 83       	std	Z+2, r24	; 0x02
     8f0:	93 83       	std	Z+3, r25	; 0x03
     8f2:	a4 83       	std	Z+4, r26	; 0x04
     8f4:	b5 83       	std	Z+5, r27	; 0x05
    keys[0].in_velocity = 0.0;
     8f6:	16 82       	std	Z+6, r1	; 0x06
     8f8:	17 82       	std	Z+7, r1	; 0x07
     8fa:	10 86       	std	Z+8, r1	; 0x08
     8fc:	11 86       	std	Z+9, r1	; 0x09
    keys[0].out_velocity = 0.0;
     8fe:	12 86       	std	Z+10, r1	; 0x0a
     900:	13 86       	std	Z+11, r1	; 0x0b
     902:	14 86       	std	Z+12, r1	; 0x0c
     904:	15 86       	std	Z+13, r1	; 0x0d

    // Initialize an empty hermite curve at the center servo position.
    curve_init(0, 0, 512.0, 512.0, 0.0, 0.0);
     906:	1f 92       	push	r1
     908:	1f 92       	push	r1
     90a:	1f 92       	push	r1
     90c:	1f 92       	push	r1
     90e:	a1 2c       	mov	r10, r1
     910:	b1 2c       	mov	r11, r1
     912:	65 01       	movw	r12, r10
     914:	7c 01       	movw	r14, r24
     916:	8d 01       	movw	r16, r26
     918:	9c 01       	movw	r18, r24
     91a:	ad 01       	movw	r20, r26
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	57 dc       	rcall	.-1874   	; 0x1d4 <curve_init>

    // Reset the registers.
    motion_registers_reset();
     926:	a1 df       	rcall	.-190    	; 0x86a <motion_registers_reset>
}
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	08 95       	ret

00000942 <motion_reset>:


void motion_reset(int16_t position)
// Reset the motion buffer to the specified position.  The enabled state is preserved.
{
     942:	af 92       	push	r10
     944:	bf 92       	push	r11
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
    // Reset the counter.
    motion_counter = 0;
     956:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <motion_counter>
     95a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <motion_counter+0x1>
     95e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <motion_counter+0x2>
     962:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <motion_counter+0x3>

    // Reset the duration.
    motion_duration = 0;
     966:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <motion_duration>
     96a:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <motion_duration+0x1>
     96e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <motion_duration+0x2>
     972:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motion_duration+0x3>

    // Reset the queue.
    motion_head = 0;
     976:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motion_head>
    motion_tail = 0;
     97a:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <motion_tail>

    // Reset the keypoint.
    keys[0].delta = 0;
     97e:	c4 e7       	ldi	r28, 0x74	; 116
     980:	d0 e0       	ldi	r29, 0x00	; 0
     982:	19 82       	std	Y+1, r1	; 0x01
     984:	18 82       	st	Y, r1
static motion_key keys[MOTION_BUFFER_SIZE];

static float int_to_float(int16_t a)
// 16bit unsigned integer to float.
{
    return (float) a;
     986:	bc 01       	movw	r22, r24
     988:	99 0f       	add	r25, r25
     98a:	88 0b       	sbc	r24, r24
     98c:	99 0b       	sbc	r25, r25
     98e:	63 d8       	rcall	.-3898   	; 0xfffffa56 <__eeprom_end+0xff7efa56>
     990:	9b 01       	movw	r18, r22
     992:	ac 01       	movw	r20, r24
    motion_head = 0;
    motion_tail = 0;

    // Reset the keypoint.
    keys[0].delta = 0;
    keys[0].position = int_to_float(position);
     994:	6a 83       	std	Y+2, r22	; 0x02
     996:	7b 83       	std	Y+3, r23	; 0x03
     998:	8c 83       	std	Y+4, r24	; 0x04
     99a:	9d 83       	std	Y+5, r25	; 0x05
    keys[0].in_velocity = 0.0;
     99c:	1e 82       	std	Y+6, r1	; 0x06
     99e:	1f 82       	std	Y+7, r1	; 0x07
     9a0:	18 86       	std	Y+8, r1	; 0x08
     9a2:	19 86       	std	Y+9, r1	; 0x09
    keys[0].out_velocity = 0.0;
     9a4:	1a 86       	std	Y+10, r1	; 0x0a
     9a6:	1b 86       	std	Y+11, r1	; 0x0b
     9a8:	1c 86       	std	Y+12, r1	; 0x0c
     9aa:	1d 86       	std	Y+13, r1	; 0x0d

    // Initialize an empty hermite curve.  This is a degenerate case for the hermite
    // curve that will always return the position of the curve without velocity.
    curve_init(0, 0, keys[0].position, keys[0].position, 0.0, 0.0);
     9ac:	1f 92       	push	r1
     9ae:	1f 92       	push	r1
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	a1 2c       	mov	r10, r1
     9b6:	b1 2c       	mov	r11, r1
     9b8:	65 01       	movw	r12, r10
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	06 dc       	rcall	.-2036   	; 0x1d4 <curve_init>

    // Reset the registers.
    motion_registers_reset();
     9c8:	50 df       	rcall	.-352    	; 0x86a <motion_registers_reset>
}
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	ff 90       	pop	r15
     9dc:	ef 90       	pop	r14
     9de:	df 90       	pop	r13
     9e0:	cf 90       	pop	r12
     9e2:	bf 90       	pop	r11
     9e4:	af 90       	pop	r10
     9e6:	08 95       	ret

000009e8 <motion_append>:
uint8_t motion_append(void)
// Append a new curve keypoint from data stored in the curve registers.  The keypoint
// is offset from the previous curve by the specified delta.  An error is returned if
// there is no more room to store the new keypoint in the buffer or if the delta is
// less than one (a zero delta is not allowed).
{
     9e8:	4f 92       	push	r4
     9ea:	5f 92       	push	r5
     9ec:	6f 92       	push	r6
     9ee:	7f 92       	push	r7
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	af 92       	push	r10
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
    int16_t out_velocity;
    uint8_t next;
    uint16_t delta;

    // Get the next index in the buffer.
    next = (motion_head + 1) & MOTION_BUFFER_MASK;
     a06:	c0 91 5b 01 	lds	r28, 0x015B	; 0x80015b <motion_head>
     a0a:	cf 5f       	subi	r28, 0xFF	; 255
     a0c:	c7 70       	andi	r28, 0x07	; 7

    // Return error if we have looped the head to the tail and the buffer is filled.
    if (next == motion_tail) return 0;
     a0e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <motion_tail>
     a12:	c8 17       	cp	r28, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <motion_append+0x30>
     a16:	87 c0       	rjmp	.+270    	; 0xb26 <motion_append+0x13e>

    // Get the position, velocity and time delta values from the registers.
    position = (int16_t) registers_read_word(REG_CURVE_POSITION_HI, REG_CURVE_POSITION_LO);
     a18:	6b e1       	ldi	r22, 0x1B	; 27
     a1a:	8a e1       	ldi	r24, 0x1A	; 26
     a1c:	7c d5       	rcall	.+2808   	; 0x1516 <registers_read_word>
     a1e:	3c 01       	movw	r6, r24
    in_velocity = (int16_t) registers_read_word(REG_CURVE_IN_VELOCITY_HI, REG_CURVE_IN_VELOCITY_LO);
     a20:	6d e1       	ldi	r22, 0x1D	; 29
     a22:	8c e1       	ldi	r24, 0x1C	; 28
     a24:	78 d5       	rcall	.+2800   	; 0x1516 <registers_read_word>
     a26:	6c 01       	movw	r12, r24
    out_velocity = (int16_t) registers_read_word(REG_CURVE_OUT_VELOCITY_HI, REG_CURVE_OUT_VELOCITY_LO);
     a28:	6f e1       	ldi	r22, 0x1F	; 31
     a2a:	8e e1       	ldi	r24, 0x1E	; 30
     a2c:	74 d5       	rcall	.+2792   	; 0x1516 <registers_read_word>
     a2e:	7c 01       	movw	r14, r24
    delta = (uint16_t) registers_read_word(REG_CURVE_DELTA_HI, REG_CURVE_DELTA_LO);
     a30:	69 e1       	ldi	r22, 0x19	; 25
     a32:	88 e1       	ldi	r24, 0x18	; 24
     a34:	70 d5       	rcall	.+2784   	; 0x1516 <registers_read_word>
     a36:	4c 01       	movw	r8, r24

    // Keypoint delta must be greater than zero.
    if (delta < 1) return 0;
     a38:	89 2b       	or	r24, r25
     a3a:	09 f4       	brne	.+2      	; 0xa3e <motion_append+0x56>
     a3c:	76 c0       	rjmp	.+236    	; 0xb2a <motion_append+0x142>

    // Fill in the next keypoint.
    keys[next].delta = delta;
     a3e:	8c 2f       	mov	r24, r28
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	8c 01       	movw	r16, r24
     a48:	00 0f       	add	r16, r16
     a4a:	11 1f       	adc	r17, r17
     a4c:	00 0f       	add	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	00 0f       	add	r16, r16
     a52:	11 1f       	adc	r17, r17
     a54:	08 1b       	sub	r16, r24
     a56:	19 0b       	sbc	r17, r25
     a58:	0c 58       	subi	r16, 0x8C	; 140
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	f8 01       	movw	r30, r16
     a5e:	91 82       	std	Z+1, r9	; 0x01
     a60:	80 82       	st	Z, r8
static motion_key keys[MOTION_BUFFER_SIZE];

static float int_to_float(int16_t a)
// 16bit unsigned integer to float.
{
    return (float) a;
     a62:	b3 01       	movw	r22, r6
     a64:	77 0c       	add	r7, r7
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	f5 d7       	rcall	.+4074   	; 0x1a56 <__floatsisf>
     a6c:	2b 01       	movw	r4, r22
     a6e:	3c 01       	movw	r6, r24
    // Keypoint delta must be greater than zero.
    if (delta < 1) return 0;

    // Fill in the next keypoint.
    keys[next].delta = delta;
    keys[next].position = int_to_float(position);
     a70:	f8 01       	movw	r30, r16
     a72:	62 83       	std	Z+2, r22	; 0x02
     a74:	73 83       	std	Z+3, r23	; 0x03
     a76:	84 83       	std	Z+4, r24	; 0x04
     a78:	95 83       	std	Z+5, r25	; 0x05
    keys[next].in_velocity = fixed_to_float(in_velocity);
     a7a:	b6 01       	movw	r22, r12
     a7c:	dd 0c       	add	r13, r13
     a7e:	88 0b       	sbc	r24, r24
     a80:	99 0b       	sbc	r25, r25
     a82:	e9 d7       	rcall	.+4050   	; 0x1a56 <__floatsisf>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	40 e8       	ldi	r20, 0x80	; 128
     a8a:	5a e3       	ldi	r21, 0x3A	; 58
     a8c:	70 d8       	rcall	.-3872   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     a8e:	f8 01       	movw	r30, r16
     a90:	66 83       	std	Z+6, r22	; 0x06
     a92:	77 83       	std	Z+7, r23	; 0x07
     a94:	80 87       	std	Z+8, r24	; 0x08
     a96:	91 87       	std	Z+9, r25	; 0x09
    keys[next].out_velocity = fixed_to_float(out_velocity);
     a98:	b7 01       	movw	r22, r14
     a9a:	ff 0c       	add	r15, r15
     a9c:	88 0b       	sbc	r24, r24
     a9e:	99 0b       	sbc	r25, r25
     aa0:	da d7       	rcall	.+4020   	; 0x1a56 <__floatsisf>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5a e3       	ldi	r21, 0x3A	; 58
     aaa:	61 d8       	rcall	.-3902   	; 0xfffffb6e <__eeprom_end+0xff7efb6e>
     aac:	f8 01       	movw	r30, r16
     aae:	62 87       	std	Z+10, r22	; 0x0a
     ab0:	73 87       	std	Z+11, r23	; 0x0b
     ab2:	84 87       	std	Z+12, r24	; 0x0c
     ab4:	95 87       	std	Z+13, r25	; 0x0d

    // Is this keypoint being added to an empty buffer?
    if (motion_tail == motion_head)
     ab6:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <motion_tail>
     aba:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <motion_head>
     abe:	98 13       	cpse	r25, r24
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <motion_append+0x10c>
    {
        // Initialize a new hermite curve that gets us from the current position to the new position.
        // We use a velocity of zero at each end to smoothly transition from one to the other.
        curve_init(0, delta, curve_get_p1(), keys[next].position, 0.0, 0.0);
     ac2:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <curve_p1>
     ac6:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <curve_p1+0x1>
     aca:	40 91 48 01 	lds	r20, 0x0148	; 0x800148 <curve_p1+0x2>
     ace:	50 91 49 01 	lds	r21, 0x0149	; 0x800149 <curve_p1+0x3>
     ad2:	1f 92       	push	r1
     ad4:	1f 92       	push	r1
     ad6:	1f 92       	push	r1
     ad8:	1f 92       	push	r1
     ada:	a1 2c       	mov	r10, r1
     adc:	b1 2c       	mov	r11, r1
     ade:	65 01       	movw	r12, r10
     ae0:	83 01       	movw	r16, r6
     ae2:	72 01       	movw	r14, r4
     ae4:	b4 01       	movw	r22, r8
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	74 db       	rcall	.-2328   	; 0x1d4 <curve_init>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
    }

    // Increase the duration of the buffer.
    motion_duration += delta;
     af4:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <motion_duration>
     af8:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <motion_duration+0x1>
     afc:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <motion_duration+0x2>
     b00:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <motion_duration+0x3>
     b04:	88 0d       	add	r24, r8
     b06:	99 1d       	adc	r25, r9
     b08:	a1 1d       	adc	r26, r1
     b0a:	b1 1d       	adc	r27, r1
     b0c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <motion_duration>
     b10:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <motion_duration+0x1>
     b14:	a0 93 59 01 	sts	0x0159, r26	; 0x800159 <motion_duration+0x2>
     b18:	b0 93 5a 01 	sts	0x015A, r27	; 0x80015a <motion_duration+0x3>

    // Set the new head index.
    motion_head = next;
     b1c:	c0 93 5b 01 	sts	0x015B, r28	; 0x80015b <motion_head>

    // Reset the motion registers and update the buffer status.
    motion_registers_reset();
     b20:	a4 de       	rcall	.-696    	; 0x86a <motion_registers_reset>

    return 1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	03 c0       	rjmp	.+6      	; 0xb2c <motion_append+0x144>

    // Get the next index in the buffer.
    next = (motion_head + 1) & MOTION_BUFFER_MASK;

    // Return error if we have looped the head to the tail and the buffer is filled.
    if (next == motion_tail) return 0;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <motion_append+0x144>
    in_velocity = (int16_t) registers_read_word(REG_CURVE_IN_VELOCITY_HI, REG_CURVE_IN_VELOCITY_LO);
    out_velocity = (int16_t) registers_read_word(REG_CURVE_OUT_VELOCITY_HI, REG_CURVE_OUT_VELOCITY_LO);
    delta = (uint16_t) registers_read_word(REG_CURVE_DELTA_HI, REG_CURVE_DELTA_LO);

    // Keypoint delta must be greater than zero.
    if (delta < 1) return 0;
     b2a:	80 e0       	ldi	r24, 0x00	; 0

    // Reset the motion registers and update the buffer status.
    motion_registers_reset();

    return 1;
}
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	08 95       	ret

00000b4c <motion_next>:

void motion_next(uint16_t delta)
// Increment the buffer counter by the indicated delta and return the position
// and velocity from the buffered curves.  If the delta is zero the current
// position and velocity is returned.
{
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	28 97       	sbiw	r28, 0x08	; 8
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
    float fposition;
    float fvelocity;

    // Determine if curve motion is disabled in the registers.
    if (!(registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_MOTION_ENABLED))) return;
     b74:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <registers+0x5>
     b78:	22 ff       	sbrs	r18, 2
     b7a:	31 c1       	rjmp	.+610    	; 0xdde <motion_next+0x292>

    // Are we processing an empty curve?
    if (motion_tail == motion_head)
     b7c:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <motion_tail>
     b80:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <motion_head>
     b84:	32 13       	cpse	r19, r18
     b86:	11 c0       	rjmp	.+34     	; 0xbaa <motion_next+0x5e>
    {
        // Yes. Keep the counter and duration at zero.
        motion_counter = 0;
     b88:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <motion_counter>
     b8c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <motion_counter+0x1>
     b90:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <motion_counter+0x2>
     b94:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <motion_counter+0x3>
        motion_duration = 0;
     b98:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <motion_duration>
     b9c:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <motion_duration+0x1>
     ba0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <motion_duration+0x2>
     ba4:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motion_duration+0x3>
     ba8:	e6 c0       	rjmp	.+460    	; 0xd76 <motion_next+0x22a>
    }
    else
    {
        // Increment the counter.
        motion_counter += delta;
     baa:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <motion_counter>
     bae:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <motion_counter+0x1>
     bb2:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <motion_counter+0x2>
     bb6:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <motion_counter+0x3>
     bba:	48 0f       	add	r20, r24
     bbc:	59 1f       	adc	r21, r25
     bbe:	61 1d       	adc	r22, r1
     bc0:	71 1d       	adc	r23, r1
     bc2:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <motion_counter>
     bc6:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <motion_counter+0x1>
     bca:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <motion_counter+0x2>
     bce:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <motion_counter+0x3>

        // Have we exceeded the duration of the currently buffered curve?
        while (motion_counter > curve_get_duration())
     bd2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <curve_duration>
     bd6:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <curve_duration+0x1>
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	84 17       	cp	r24, r20
     be0:	95 07       	cpc	r25, r21
     be2:	a6 07       	cpc	r26, r22
     be4:	b7 07       	cpc	r27, r23
     be6:	08 f0       	brcs	.+2      	; 0xbea <motion_next+0x9e>
     be8:	c6 c0       	rjmp	.+396    	; 0xd76 <motion_next+0x22a>
     bea:	0f 2e       	mov	r0, r31
     bec:	fc e5       	ldi	r31, 0x5C	; 92
     bee:	8f 2e       	mov	r8, r31
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	9f 2e       	mov	r9, r31
     bf4:	f0 2d       	mov	r31, r0
        {
            // Reduce the buffer counter by the currently buffered curve duration.
            motion_counter -= curve_get_duration();
     bf6:	48 1b       	sub	r20, r24
     bf8:	59 0b       	sbc	r21, r25
     bfa:	6a 0b       	sbc	r22, r26
     bfc:	7b 0b       	sbc	r23, r27
     bfe:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <motion_counter>
     c02:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <motion_counter+0x1>
     c06:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <motion_counter+0x2>
     c0a:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <motion_counter+0x3>

            // Reduce the buffer duration by the currently buffered curve duration.
            motion_duration -= curve_get_duration();
     c0e:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <motion_duration>
     c12:	50 91 58 01 	lds	r21, 0x0158	; 0x800158 <motion_duration+0x1>
     c16:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <motion_duration+0x2>
     c1a:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <motion_duration+0x3>
     c1e:	8a 01       	movw	r16, r20
     c20:	9b 01       	movw	r18, r22
     c22:	08 1b       	sub	r16, r24
     c24:	19 0b       	sbc	r17, r25
     c26:	2a 0b       	sbc	r18, r26
     c28:	3b 0b       	sbc	r19, r27
     c2a:	00 93 57 01 	sts	0x0157, r16	; 0x800157 <motion_duration>
     c2e:	10 93 58 01 	sts	0x0158, r17	; 0x800158 <motion_duration+0x1>
     c32:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <motion_duration+0x2>
     c36:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <motion_duration+0x3>

            // Increment the tail to process the next buffered curve.
            motion_tail = (motion_tail + 1) & MOTION_BUFFER_MASK;
     c3a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <motion_tail>
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	87 70       	andi	r24, 0x07	; 7
     c42:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <motion_tail>

            // Has the tail caught up with the head?
            if (motion_tail == motion_head)
     c46:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <motion_head>
     c4a:	89 13       	cpse	r24, r25
     c4c:	35 c0       	rjmp	.+106    	; 0xcb8 <motion_next+0x16c>
            {
                // Initialize an empty hermite curve with a zero duration.  This is a degenerate case for
                // the hermite cuve that will always return the position of the curve without velocity.
                curve_init(0, 0, keys[motion_head].position, keys[motion_head].position, 0.0, 0.0);
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	fc 01       	movw	r30, r24
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	e8 1b       	sub	r30, r24
     c64:	f9 0b       	sbc	r31, r25
     c66:	ec 58       	subi	r30, 0x8C	; 140
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	22 81       	ldd	r18, Z+2	; 0x02
     c6c:	33 81       	ldd	r19, Z+3	; 0x03
     c6e:	44 81       	ldd	r20, Z+4	; 0x04
     c70:	55 81       	ldd	r21, Z+5	; 0x05
     c72:	1f 92       	push	r1
     c74:	1f 92       	push	r1
     c76:	1f 92       	push	r1
     c78:	1f 92       	push	r1
     c7a:	a1 2c       	mov	r10, r1
     c7c:	b1 2c       	mov	r11, r1
     c7e:	65 01       	movw	r12, r10
     c80:	79 01       	movw	r14, r18
     c82:	8a 01       	movw	r16, r20
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a3 da       	rcall	.-2746   	; 0x1d4 <curve_init>

                // Reset the buffer counter and duration to zero.
                motion_counter = 0;
     c8e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <motion_counter>
     c92:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <motion_counter+0x1>
     c96:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <motion_counter+0x2>
     c9a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <motion_counter+0x3>
                motion_duration = 0;
     c9e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <motion_duration>
     ca2:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <motion_duration+0x1>
     ca6:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <motion_duration+0x2>
     caa:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motion_duration+0x3>
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	48 c0       	rjmp	.+144    	; 0xd48 <motion_next+0x1fc>
                // Get the current point and next point for the curve.
                curr_point = motion_tail;
                next_point = (curr_point + 1) & MOTION_BUFFER_MASK;

                // Initialize the hermite curve from the current and next point.
                curve_init(0, keys[next_point].delta,
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	28 0f       	add	r18, r24
     cbc:	27 70       	andi	r18, 0x07	; 7
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	dc 01       	movw	r26, r24
     cc8:	aa 0f       	add	r26, r26
     cca:	bb 1f       	adc	r27, r27
     ccc:	aa 0f       	add	r26, r26
     cce:	bb 1f       	adc	r27, r27
     cd0:	aa 0f       	add	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	a8 1b       	sub	r26, r24
     cd6:	b9 0b       	sbc	r27, r25
     cd8:	ac 58       	subi	r26, 0x8C	; 140
     cda:	bf 4f       	sbci	r27, 0xFF	; 255
     cdc:	1a 96       	adiw	r26, 0x0a	; 10
     cde:	ad 90       	ld	r10, X+
     ce0:	bd 90       	ld	r11, X+
     ce2:	cd 90       	ld	r12, X+
     ce4:	dc 90       	ld	r13, X
     ce6:	1d 97       	sbiw	r26, 0x0d	; 13
     ce8:	c9 01       	movw	r24, r18
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	fc 01       	movw	r30, r24
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e8 1b       	sub	r30, r24
     cfe:	f9 0b       	sbc	r31, r25
     d00:	ec 58       	subi	r30, 0x8C	; 140
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	e2 80       	ldd	r14, Z+2	; 0x02
     d06:	f3 80       	ldd	r15, Z+3	; 0x03
     d08:	04 81       	ldd	r16, Z+4	; 0x04
     d0a:	15 81       	ldd	r17, Z+5	; 0x05
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	2d 91       	ld	r18, X+
     d10:	3d 91       	ld	r19, X+
     d12:	4d 91       	ld	r20, X+
     d14:	5c 91       	ld	r21, X
     d16:	15 97       	sbiw	r26, 0x05	; 5
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	df 01       	movw	r26, r30
     d1e:	16 96       	adiw	r26, 0x06	; 6
     d20:	13 96       	adiw	r26, 0x03	; 3
     d22:	8c 91       	ld	r24, X
     d24:	13 97       	sbiw	r26, 0x03	; 3
     d26:	8f 93       	push	r24
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	8c 91       	ld	r24, X
     d2c:	12 97       	sbiw	r26, 0x02	; 2
     d2e:	8f 93       	push	r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	8c 91       	ld	r24, X
     d34:	8f 93       	push	r24
     d36:	86 81       	ldd	r24, Z+6	; 0x06
     d38:	8f 93       	push	r24
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	4a da       	rcall	.-2924   	; 0x1d4 <curve_init>
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
                           keys[curr_point].position, keys[next_point].position,
                           keys[curr_point].out_velocity, keys[next_point].in_velocity);
            }

            // Update the space available in the buffer.
            registers_write_byte(REG_CURVE_BUFFER, motion_buffer_left());
     d48:	84 dd       	rcall	.-1272   	; 0x852 <motion_buffer_left>
     d4a:	f4 01       	movw	r30, r8
     d4c:	87 8b       	std	Z+23, r24	; 0x17
    {
        // Increment the counter.
        motion_counter += delta;

        // Have we exceeded the duration of the currently buffered curve?
        while (motion_counter > curve_get_duration())
     d4e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <curve_duration>
     d52:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <curve_duration+0x1>
     d56:	a0 e0       	ldi	r26, 0x00	; 0
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <motion_counter>
     d5e:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <motion_counter+0x1>
     d62:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <motion_counter+0x2>
     d66:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <motion_counter+0x3>
     d6a:	84 17       	cp	r24, r20
     d6c:	95 07       	cpc	r25, r21
     d6e:	a6 07       	cpc	r26, r22
     d70:	b7 07       	cpc	r27, r23
     d72:	08 f4       	brcc	.+2      	; 0xd76 <motion_next+0x22a>
     d74:	40 cf       	rjmp	.-384    	; 0xbf6 <motion_next+0xaa>
            registers_write_byte(REG_CURVE_BUFFER, motion_buffer_left());
        }
    }

    // Get the position and velocity from the hermite curve.
    curve_solve(motion_counter, &fposition, &fvelocity);
     d76:	ae 01       	movw	r20, r28
     d78:	4b 5f       	subi	r20, 0xFB	; 251
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <motion_counter>
     d86:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <motion_counter+0x1>
     d8a:	15 db       	rcall	.-2518   	; 0x3b6 <curve_solve>

    // The velocity is in position units a millisecond, but we really need the
    // velocity to be measured in position units every 10 milliseconds to match
    // the sample period of the ADC.
    fvelocity *= 10.0;
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e2       	ldi	r20, 0x20	; 32
     d92:	51 e4       	ldi	r21, 0x41	; 65
     d94:	6d 81       	ldd	r22, Y+5	; 0x05
     d96:	7e 81       	ldd	r23, Y+6	; 0x06
     d98:	8f 81       	ldd	r24, Y+7	; 0x07
     d9a:	98 85       	ldd	r25, Y+8	; 0x08
     d9c:	e8 d6       	rcall	.+3536   	; 0x1b6e <__mulsf3>
     d9e:	6d 83       	std	Y+5, r22	; 0x05
     da0:	7e 83       	std	Y+6, r23	; 0x06
     da2:	8f 83       	std	Y+7, r24	; 0x07
     da4:	98 87       	std	Y+8, r25	; 0x08

    // Update the seek position register.
    registers_write_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO, float_to_int(fposition));
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	5f e3       	ldi	r21, 0x3F	; 63
     dae:	69 81       	ldd	r22, Y+1	; 0x01
     db0:	7a 81       	ldd	r23, Y+2	; 0x02
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	50 d5       	rcall	.+2720   	; 0x1858 <__addsf3>
     db8:	1b d6       	rcall	.+3126   	; 0x19f0 <__fixsfsi>
     dba:	ab 01       	movw	r20, r22
     dbc:	61 e1       	ldi	r22, 0x11	; 17
     dbe:	80 e1       	ldi	r24, 0x10	; 16
     dc0:	bc d3       	rcall	.+1912   	; 0x153a <registers_write_word>

    // Update the seek velocity register.
    registers_write_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO, float_to_int(fvelocity));
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	6d 81       	ldd	r22, Y+5	; 0x05
     dcc:	7e 81       	ldd	r23, Y+6	; 0x06
     dce:	8f 81       	ldd	r24, Y+7	; 0x07
     dd0:	98 85       	ldd	r25, Y+8	; 0x08
     dd2:	42 d5       	rcall	.+2692   	; 0x1858 <__addsf3>
     dd4:	0d d6       	rcall	.+3098   	; 0x19f0 <__fixsfsi>
     dd6:	ab 01       	movw	r20, r22
     dd8:	63 e1       	ldi	r22, 0x13	; 19
     dda:	82 e1       	ldi	r24, 0x12	; 18
     ddc:	ae d3       	rcall	.+1884   	; 0x153a <registers_write_word>
}
     dde:	28 96       	adiw	r28, 0x08	; 8
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	08 95       	ret

00000e04 <pid_init>:

void pid_init(void)
// Initialize the PID algorithm module.
{
    // Initialize preserved values.
    previous_seek = 0;
     e04:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <previous_seek+0x1>
     e08:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <previous_seek>
    previous_position = 0;
     e0c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <previous_position+0x1>
     e10:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <previous_position>
     e14:	08 95       	ret

00000e16 <pid_registers_defaults>:


void pid_registers_defaults(void)
// Initialize the PID algorithm related register values.  This is done 
// here to keep the PID related code in a single file.  
{
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	cc e5       	ldi	r28, 0x5C	; 92
     e1c:	d1 e0       	ldi	r29, 0x01	; 1
     e1e:	19 a2       	std	Y+33, r1	; 0x21
    // Default deadband.
    registers_write_byte(REG_PID_DEADBAND, DEFAULT_PID_DEADBAND);

    // Default gain values.
    registers_write_word(REG_PID_PGAIN_HI, REG_PID_PGAIN_LO, DEFAULT_PID_PGAIN);
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	63 e2       	ldi	r22, 0x23	; 35
     e26:	82 e2       	ldi	r24, 0x22	; 34
     e28:	88 d3       	rcall	.+1808   	; 0x153a <registers_write_word>
    registers_write_word(REG_PID_DGAIN_HI, REG_PID_DGAIN_LO, DEFAULT_PID_DGAIN);
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	65 e2       	ldi	r22, 0x25	; 37
     e30:	84 e2       	ldi	r24, 0x24	; 36
     e32:	83 d3       	rcall	.+1798   	; 0x153a <registers_write_word>
    registers_write_word(REG_PID_IGAIN_HI, REG_PID_IGAIN_LO, DEFAULT_PID_IGAIN);
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	67 e2       	ldi	r22, 0x27	; 39
     e3a:	86 e2       	ldi	r24, 0x26	; 38
     e3c:	7e d3       	rcall	.+1788   	; 0x153a <registers_write_word>

    // Default position limits.
    registers_write_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO, DEFAULT_MIN_SEEK);
     e3e:	40 e6       	ldi	r20, 0x60	; 96
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	6b e2       	ldi	r22, 0x2B	; 43
     e44:	8a e2       	ldi	r24, 0x2A	; 42
     e46:	79 d3       	rcall	.+1778   	; 0x153a <registers_write_word>
    registers_write_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO, DEFAULT_MAX_SEEK);
     e48:	40 ea       	ldi	r20, 0xA0	; 160
     e4a:	53 e0       	ldi	r21, 0x03	; 3
     e4c:	6d e2       	ldi	r22, 0x2D	; 45
     e4e:	8c e2       	ldi	r24, 0x2C	; 44
     e50:	74 d3       	rcall	.+1768   	; 0x153a <registers_write_word>
     e52:	1e a6       	std	Y+46, r1	; 0x2e

    // Default reverse seek setting.
    registers_write_byte(REG_REVERSE_SEEK, 0x00);
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <pid_position_to_pwm>:

int16_t pid_position_to_pwm(int16_t current_position)
// This is a modified pid algorithm by which the seek position and seek
// velocity are assumed to be a moving target.  The algorithm attempts to
// output a pwm value that will achieve a predicted position and velocity.
{
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
static int32_t filter_reg = 0;

static int16_t filter_update(int16_t input)
{
    // Update the filter with the current input.
    filter_reg = filter_reg - (filter_reg >> FILTER_SHIFT) + input;
     e64:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <filter_reg>
     e68:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <filter_reg+0x1>
     e6c:	a0 91 fe 00 	lds	r26, 0x00FE	; 0x8000fe <filter_reg+0x2>
     e70:	b0 91 ff 00 	lds	r27, 0x00FF	; 0x8000ff <filter_reg+0x3>
     e74:	ac 01       	movw	r20, r24
     e76:	bd 01       	movw	r22, r26
     e78:	75 95       	asr	r23
     e7a:	67 95       	ror	r22
     e7c:	57 95       	ror	r21
     e7e:	47 95       	ror	r20
     e80:	84 1b       	sub	r24, r20
     e82:	95 0b       	sbc	r25, r21
     e84:	a6 0b       	sbc	r26, r22
     e86:	b7 0b       	sbc	r27, r23
     e88:	ae 01       	movw	r20, r28
     e8a:	0d 2e       	mov	r0, r29
     e8c:	00 0c       	add	r0, r0
     e8e:	66 0b       	sbc	r22, r22
     e90:	77 0b       	sbc	r23, r23
     e92:	84 0f       	add	r24, r20
     e94:	95 1f       	adc	r25, r21
     e96:	a6 1f       	adc	r26, r22
     e98:	b7 1f       	adc	r27, r23
     e9a:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <filter_reg>
     e9e:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <filter_reg+0x1>
     ea2:	a0 93 fe 00 	sts	0x00FE, r26	; 0x8000fe <filter_reg+0x2>
     ea6:	b0 93 ff 00 	sts	0x00FF, r27	; 0x8000ff <filter_reg+0x3>

    // Scale output for unity gain.
    return (int16_t) (filter_reg >> FILTER_SHIFT);
     eaa:	b5 95       	asr	r27
     eac:	a7 95       	ror	r26
     eae:	97 95       	ror	r25
     eb0:	87 95       	ror	r24
    static int32_t pwm_output;
    static uint16_t d_gain;
    static uint16_t p_gain;

    // Filter the current position thru a digital low-pass filter.
    filtered_position = filter_update(current_position);
     eb2:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <filtered_position.1665+0x1>
     eb6:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <filtered_position.1665>

    // Use the filtered position to determine velocity.
    current_velocity = filtered_position - previous_position;
     eba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <previous_position>
     ebe:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <previous_position+0x1>
     ec2:	ac 01       	movw	r20, r24
     ec4:	42 1b       	sub	r20, r18
     ec6:	53 0b       	sbc	r21, r19
     ec8:	50 93 f9 00 	sts	0x00F9, r21	; 0x8000f9 <current_velocity.1664+0x1>
     ecc:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <current_velocity.1664>
    previous_position = filtered_position;
     ed0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <previous_position+0x1>
     ed4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <previous_position>

    // Get the seek position and velocity.
    seek_position = (int16_t) registers_read_word(REG_SEEK_POSITION_HI, REG_SEEK_POSITION_LO);
     ed8:	61 e1       	ldi	r22, 0x11	; 17
     eda:	80 e1       	ldi	r24, 0x10	; 16
     edc:	1c d3       	rcall	.+1592   	; 0x1516 <registers_read_word>
     ede:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <seek_position.1660+0x1>
     ee2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <seek_position.1660>
    seek_velocity = (int16_t) registers_read_word(REG_SEEK_VELOCITY_HI, REG_SEEK_VELOCITY_LO);
     ee6:	63 e1       	ldi	r22, 0x13	; 19
     ee8:	82 e1       	ldi	r24, 0x12	; 18
     eea:	15 d3       	rcall	.+1578   	; 0x1516 <registers_read_word>
     eec:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <seek_velocity.1661+0x1>
     ef0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <seek_velocity.1661>

    // Get the minimum and maximum position.
    minimum_position = (int16_t) registers_read_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
     ef4:	6b e2       	ldi	r22, 0x2B	; 43
     ef6:	8a e2       	ldi	r24, 0x2A	; 42
     ef8:	0e d3       	rcall	.+1564   	; 0x1516 <registers_read_word>
     efa:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <minimum_position.1662+0x1>
     efe:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <minimum_position.1662>
    maximum_position = (int16_t) registers_read_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
     f02:	6d e2       	ldi	r22, 0x2D	; 45
     f04:	8c e2       	ldi	r24, 0x2C	; 44
     f06:	07 d3       	rcall	.+1550   	; 0x1516 <registers_read_word>
     f08:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <maximum_position.1663+0x1>
     f0c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <maximum_position.1663>

    // Are we reversing the seek sense?
    if (registers_read_byte(REG_REVERSE_SEEK) != 0)
     f10:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <registers+0x2e>
     f14:	88 23       	and	r24, r24
     f16:	99 f1       	breq	.+102    	; 0xf7e <pid_position_to_pwm+0x124>
    {
        // Yes. Update the position and velocity using reverse sense.
        registers_write_word(REG_POSITION_HI, REG_POSITION_LO, (uint16_t) (MAX_POSITION - current_position));
     f18:	0f ef       	ldi	r16, 0xFF	; 255
     f1a:	13 e0       	ldi	r17, 0x03	; 3
     f1c:	a8 01       	movw	r20, r16
     f1e:	4c 1b       	sub	r20, r28
     f20:	5d 0b       	sbc	r21, r29
     f22:	69 e0       	ldi	r22, 0x09	; 9
     f24:	88 e0       	ldi	r24, 0x08	; 8
     f26:	09 d3       	rcall	.+1554   	; 0x153a <registers_write_word>
        registers_write_word(REG_VELOCITY_HI, REG_VELOCITY_LO, (uint16_t) -current_velocity);
     f28:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <current_velocity.1664>
     f2c:	50 91 f9 00 	lds	r21, 0x00F9	; 0x8000f9 <current_velocity.1664+0x1>
     f30:	51 95       	neg	r21
     f32:	41 95       	neg	r20
     f34:	51 09       	sbc	r21, r1
     f36:	6b e0       	ldi	r22, 0x0B	; 11
     f38:	8a e0       	ldi	r24, 0x0A	; 10
     f3a:	ff d2       	rcall	.+1534   	; 0x153a <registers_write_word>

        // Reverse sense the seek and other position values.
        seek_position = MAX_POSITION - seek_position;
     f3c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <seek_position.1660>
     f40:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <seek_position.1660+0x1>
     f44:	98 01       	movw	r18, r16
     f46:	28 1b       	sub	r18, r24
     f48:	39 0b       	sbc	r19, r25
     f4a:	30 93 f7 00 	sts	0x00F7, r19	; 0x8000f7 <seek_position.1660+0x1>
     f4e:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <seek_position.1660>
        minimum_position = MAX_POSITION - minimum_position;
     f52:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <minimum_position.1662>
     f56:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <minimum_position.1662+0x1>
     f5a:	a8 01       	movw	r20, r16
     f5c:	48 1b       	sub	r20, r24
     f5e:	59 0b       	sbc	r21, r25
     f60:	50 93 f3 00 	sts	0x00F3, r21	; 0x8000f3 <minimum_position.1662+0x1>
     f64:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <minimum_position.1662>
        maximum_position = MAX_POSITION - maximum_position;
     f68:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <maximum_position.1663>
     f6c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <maximum_position.1663+0x1>
     f70:	08 1b       	sub	r16, r24
     f72:	19 0b       	sbc	r17, r25
     f74:	10 93 f1 00 	sts	0x00F1, r17	; 0x8000f1 <maximum_position.1663+0x1>
     f78:	00 93 f0 00 	sts	0x00F0, r16	; 0x8000f0 <maximum_position.1663>
     f7c:	0b c0       	rjmp	.+22     	; 0xf94 <pid_position_to_pwm+0x13a>
    }
    else
    {
        // No. Update the position and velocity registers without change.
        registers_write_word(REG_POSITION_HI, REG_POSITION_LO, (uint16_t) current_position);
     f7e:	ae 01       	movw	r20, r28
     f80:	69 e0       	ldi	r22, 0x09	; 9
     f82:	88 e0       	ldi	r24, 0x08	; 8
     f84:	da d2       	rcall	.+1460   	; 0x153a <registers_write_word>
        registers_write_word(REG_VELOCITY_HI, REG_VELOCITY_LO, (uint16_t) current_velocity);
     f86:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <current_velocity.1664>
     f8a:	50 91 f9 00 	lds	r21, 0x00F9	; 0x8000f9 <current_velocity.1664+0x1>
     f8e:	6b e0       	ldi	r22, 0x0B	; 11
     f90:	8a e0       	ldi	r24, 0x0A	; 10
     f92:	d3 d2       	rcall	.+1446   	; 0x153a <registers_write_word>
    }

    // Get the deadband.
    deadband = (int16_t) registers_read_byte(REG_PID_DEADBAND);
     f94:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <registers+0x21>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <deadband.1657+0x1>
     f9e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <deadband.1657>

    // Use the filtered position when the seek position is not changing.
    if (seek_position == previous_seek) current_position = filtered_position;
     fa2:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <seek_position.1660>
     fa6:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <seek_position.1660+0x1>
     faa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <previous_seek>
     fae:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <previous_seek+0x1>
     fb2:	82 17       	cp	r24, r18
     fb4:	93 07       	cpc	r25, r19
     fb6:	21 f4       	brne	.+8      	; 0xfc0 <pid_position_to_pwm+0x166>
     fb8:	c0 91 fa 00 	lds	r28, 0x00FA	; 0x8000fa <filtered_position.1665>
     fbc:	d0 91 fb 00 	lds	r29, 0x00FB	; 0x8000fb <filtered_position.1665+0x1>
    previous_seek = seek_position;
     fc0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <previous_seek+0x1>
     fc4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <previous_seek>

    // Keep the seek position bound within the minimum and maximum position.
    if (seek_position < minimum_position) seek_position = minimum_position;
     fc8:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <minimum_position.1662>
     fcc:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <minimum_position.1662+0x1>
     fd0:	82 17       	cp	r24, r18
     fd2:	93 07       	cpc	r25, r19
     fd4:	24 f4       	brge	.+8      	; 0xfde <pid_position_to_pwm+0x184>
     fd6:	30 93 f7 00 	sts	0x00F7, r19	; 0x8000f7 <seek_position.1660+0x1>
     fda:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <seek_position.1660>
    if (seek_position > maximum_position) seek_position = maximum_position;
     fde:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <maximum_position.1663>
     fe2:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <maximum_position.1663+0x1>
     fe6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <seek_position.1660>
     fea:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <seek_position.1660+0x1>
     fee:	82 17       	cp	r24, r18
     ff0:	93 07       	cpc	r25, r19
     ff2:	24 f4       	brge	.+8      	; 0xffc <pid_position_to_pwm+0x1a2>
     ff4:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <seek_position.1660+0x1>
     ff8:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <seek_position.1660>

    // The proportional component to the PID is the position error.
    p_component = seek_position - current_position;
     ffc:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <seek_position.1660>
    1000:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <seek_position.1660+0x1>
    1004:	8c 1b       	sub	r24, r28
    1006:	9d 0b       	sbc	r25, r29
    1008:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <p_component.1658+0x1>
    100c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <p_component.1658>

    // The derivative component to the PID is the velocity.
    d_component = seek_velocity - current_velocity;
    1010:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seek_velocity.1661>
    1014:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <seek_velocity.1661+0x1>
    1018:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <current_velocity.1664>
    101c:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <current_velocity.1664+0x1>
    1020:	82 1b       	sub	r24, r18
    1022:	93 0b       	sbc	r25, r19
    1024:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <d_component.1659+0x1>
    1028:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <d_component.1659>

    // Get the proportional, derivative and integral gains.
    p_gain = registers_read_word(REG_PID_PGAIN_HI, REG_PID_PGAIN_LO);
    102c:	63 e2       	ldi	r22, 0x23	; 35
    102e:	82 e2       	ldi	r24, 0x22	; 34
    1030:	72 d2       	rcall	.+1252   	; 0x1516 <registers_read_word>
    1032:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <p_gain.1668+0x1>
    1036:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <p_gain.1668>
    d_gain = registers_read_word(REG_PID_DGAIN_HI, REG_PID_DGAIN_LO);
    103a:	65 e2       	ldi	r22, 0x25	; 37
    103c:	84 e2       	ldi	r24, 0x24	; 36
    103e:	6b d2       	rcall	.+1238   	; 0x1516 <registers_read_word>
    1040:	ac 01       	movw	r20, r24

    // Start with zero PWM output.
    pwm_output = 0;
    1042:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <pwm_output.1666>
    1046:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <pwm_output.1666+0x1>
    104a:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <pwm_output.1666+0x2>
    104e:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <pwm_output.1666+0x3>

    // Apply proportional component to the PWM output if outside the deadband.
    if ((p_component > deadband) || (p_component < -deadband))
    1052:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <p_component.1658>
    1056:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <p_component.1658+0x1>
    105a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <deadband.1657>
    105e:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <deadband.1657+0x1>
    1062:	8a 17       	cp	r24, r26
    1064:	9b 07       	cpc	r25, r27
    1066:	34 f0       	brlt	.+12     	; 0x1074 <pid_position_to_pwm+0x21a>
    1068:	91 95       	neg	r25
    106a:	81 95       	neg	r24
    106c:	91 09       	sbc	r25, r1
    106e:	a8 17       	cp	r26, r24
    1070:	b9 07       	cpc	r27, r25
    1072:	6c f4       	brge	.+26     	; 0x108e <pid_position_to_pwm+0x234>
    {
        // Apply the proportional component of the PWM output.
        pwm_output += (int32_t) p_component * (int32_t) p_gain;
    1074:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <p_gain.1668>
    1078:	30 91 e9 00 	lds	r19, 0x00E9	; 0x8000e9 <p_gain.1668+0x1>
    107c:	fd d5       	rcall	.+3066   	; 0x1c78 <__usmulhisi3>
    107e:	60 93 e4 00 	sts	0x00E4, r22	; 0x8000e4 <pwm_output.1666>
    1082:	70 93 e5 00 	sts	0x00E5, r23	; 0x8000e5 <pwm_output.1666+0x1>
    1086:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <pwm_output.1666+0x2>
    108a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <pwm_output.1666+0x3>

    // Apply the derivative component of the PWM output.
    pwm_output += (int32_t) d_component * (int32_t) d_gain;

    // Shift by 8 to account for the multiply by the 8:8 fixed point gain values.
    pwm_output >>= 8;
    108e:	a0 91 ea 00 	lds	r26, 0x00EA	; 0x8000ea <d_component.1659>
    1092:	b0 91 eb 00 	lds	r27, 0x00EB	; 0x8000eb <d_component.1659+0x1>
    1096:	9a 01       	movw	r18, r20
    1098:	ef d5       	rcall	.+3038   	; 0x1c78 <__usmulhisi3>
    109a:	00 91 e4 00 	lds	r16, 0x00E4	; 0x8000e4 <pwm_output.1666>
    109e:	10 91 e5 00 	lds	r17, 0x00E5	; 0x8000e5 <pwm_output.1666+0x1>
    10a2:	20 91 e6 00 	lds	r18, 0x00E6	; 0x8000e6 <pwm_output.1666+0x2>
    10a6:	30 91 e7 00 	lds	r19, 0x00E7	; 0x8000e7 <pwm_output.1666+0x3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	80 0f       	add	r24, r16
    10b0:	91 1f       	adc	r25, r17
    10b2:	a2 1f       	adc	r26, r18
    10b4:	b3 1f       	adc	r27, r19
    10b6:	89 2f       	mov	r24, r25
    10b8:	9a 2f       	mov	r25, r26
    10ba:	ab 2f       	mov	r26, r27
    10bc:	bb 27       	eor	r27, r27
    10be:	a7 fd       	sbrc	r26, 7
    10c0:	ba 95       	dec	r27

    // Check for output saturation.
    if (pwm_output > MAX_OUTPUT)
    10c2:	8f 3f       	cpi	r24, 0xFF	; 255
    10c4:	91 05       	cpc	r25, r1
    10c6:	a1 05       	cpc	r26, r1
    10c8:	b1 05       	cpc	r27, r1
    10ca:	71 f0       	breq	.+28     	; 0x10e8 <pid_position_to_pwm+0x28e>
    10cc:	6c f0       	brlt	.+26     	; 0x10e8 <pid_position_to_pwm+0x28e>
    {
        // Can't go higher than the maximum output value.
        pwm_output = MAX_OUTPUT;
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <pwm_output.1666>
    10da:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <pwm_output.1666+0x1>
    10de:	a0 93 e6 00 	sts	0x00E6, r26	; 0x8000e6 <pwm_output.1666+0x2>
    10e2:	b0 93 e7 00 	sts	0x00E7, r27	; 0x8000e7 <pwm_output.1666+0x3>
    10e6:	1b c0       	rjmp	.+54     	; 0x111e <pid_position_to_pwm+0x2c4>
    }
    else if (pwm_output < MIN_OUTPUT)
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	5f ef       	ldi	r21, 0xFF	; 255
    10ec:	95 07       	cpc	r25, r21
    10ee:	a5 07       	cpc	r26, r21
    10f0:	b5 07       	cpc	r27, r21
    10f2:	4c f0       	brlt	.+18     	; 0x1106 <pid_position_to_pwm+0x2ac>

    // Apply the derivative component of the PWM output.
    pwm_output += (int32_t) d_component * (int32_t) d_gain;

    // Shift by 8 to account for the multiply by the 8:8 fixed point gain values.
    pwm_output >>= 8;
    10f4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <pwm_output.1666>
    10f8:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <pwm_output.1666+0x1>
    10fc:	a0 93 e6 00 	sts	0x00E6, r26	; 0x8000e6 <pwm_output.1666+0x2>
    1100:	b0 93 e7 00 	sts	0x00E7, r27	; 0x8000e7 <pwm_output.1666+0x3>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <pid_position_to_pwm+0x2c4>
        pwm_output = MAX_OUTPUT;
    }
    else if (pwm_output < MIN_OUTPUT)
    {
        // Can't go lower than the minimum output value.
        pwm_output = MIN_OUTPUT;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	9f ef       	ldi	r25, 0xFF	; 255
    110a:	af ef       	ldi	r26, 0xFF	; 255
    110c:	bf ef       	ldi	r27, 0xFF	; 255
    110e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <pwm_output.1666>
    1112:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <pwm_output.1666+0x1>
    1116:	a0 93 e6 00 	sts	0x00E6, r26	; 0x8000e6 <pwm_output.1666+0x2>
    111a:	b0 93 e7 00 	sts	0x00E7, r27	; 0x8000e7 <pwm_output.1666+0x3>
    }

    // Return the PID output.
    return (int16_t) pwm_output;
}
    111e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <pwm_output.1666>
    1122:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <pwm_output.1666+0x1>
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	08 95       	ret

00001130 <power_init>:
// Initialize the power module.
{
    uint8_t i;

    // Initialize the power index.
    power_index = 0;
    1130:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <power_index>
    1134:	e4 e0       	ldi	r30, 0x04	; 4
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	84 e1       	ldi	r24, 0x14	; 20
    113a:	91 e0       	ldi	r25, 0x01	; 1

    // Initialize the power array.
    for (i = 0; i < 8; ++i) power_array[i] = 0;
    113c:	11 92       	st	Z+, r1
    113e:	11 92       	st	Z+, r1
    1140:	e8 17       	cp	r30, r24
    1142:	f9 07       	cpc	r31, r25
    1144:	d9 f7       	brne	.-10     	; 0x113c <power_init+0xc>

    // Initialize the power values within the system registers.
    registers_write_word(REG_POWER_HI, REG_POWER_LO, 0);
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	6d e0       	ldi	r22, 0x0D	; 13
    114c:	8c e0       	ldi	r24, 0x0C	; 12
    114e:	f5 d1       	rcall	.+1002   	; 0x153a <registers_write_word>
    1150:	08 95       	ret

00001152 <power_update>:
// is averaged with the seven previous power values.
{
    uint8_t i;

    // Insert the power value into the power array.
    power_array[power_index] = power;
    1152:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <power_index>
    1156:	e2 2f       	mov	r30, r18
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	ec 5f       	subi	r30, 0xFC	; 252
    1160:	fe 4f       	sbci	r31, 0xFE	; 254
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24

    // Keep the index within the array bounds.
    power_index = (power_index + 1) & 7;
    1166:	2f 5f       	subi	r18, 0xFF	; 255
    1168:	27 70       	andi	r18, 0x07	; 7
    116a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <power_index>
    116e:	e4 e0       	ldi	r30, 0x04	; 4
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	24 e1       	ldi	r18, 0x14	; 20
    1174:	31 e0       	ldi	r19, 0x01	; 1

    // Reset the power value.
    power = 0;
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	50 e0       	ldi	r21, 0x00	; 0

    // Determine the power values across the power array.
    for (i = 0; i < 8; ++i) power += power_array[i];
    117a:	81 91       	ld	r24, Z+
    117c:	91 91       	ld	r25, Z+
    117e:	48 0f       	add	r20, r24
    1180:	59 1f       	adc	r21, r25
    1182:	e2 17       	cp	r30, r18
    1184:	f3 07       	cpc	r31, r19
    1186:	c9 f7       	brne	.-14     	; 0x117a <power_update+0x28>

    // Shift the sum of power values to find the average.
    power >>= 3;

    // Update the power values within the system registers.
    registers_write_word(REG_POWER_HI, REG_POWER_LO, power);
    1188:	56 95       	lsr	r21
    118a:	47 95       	ror	r20
    118c:	56 95       	lsr	r21
    118e:	47 95       	ror	r20
    1190:	56 95       	lsr	r21
    1192:	47 95       	ror	r20
    1194:	6d e0       	ldi	r22, 0x0D	; 13
    1196:	8c e0       	ldi	r24, 0x0C	; 12
    1198:	d0 d1       	rcall	.+928    	; 0x153a <registers_write_word>
    119a:	08 95       	ret

0000119c <pwm_registers_defaults>:
    // PWM frequency (500 kHz for 8MHz clock, 1250 kHz for 20MHz clock) by a 
    // constant value to produce a PWM frequency suitable to drive a motor.  A 
    // small motor with low inductance and impedance such as those found in an 
    // RC servo will my typically use a divider value between 16 and 64.  A larger 
    // motor with higher inductance and impedance may require a greater divider.
    registers_write_word(REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO, DEFAULT_PWM_FREQ_DIVIDER);
    119c:	40 e1       	ldi	r20, 0x10	; 16
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	69 e2       	ldi	r22, 0x29	; 41
    11a2:	88 e2       	ldi	r24, 0x28	; 40
    11a4:	ca d1       	rcall	.+916    	; 0x153a <registers_write_word>
    11a6:	08 95       	ret

000011a8 <pwm_init>:

void pwm_init(void)
// Initialize the PWM module for controlling a DC motor.
{
    // Initialize the pwm frequency divider value.
    pwm_div = registers_read_word(REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO);
    11a8:	69 e2       	ldi	r22, 0x29	; 41
    11aa:	88 e2       	ldi	r24, 0x28	; 40
    11ac:	b4 d1       	rcall	.+872    	; 0x1516 <registers_read_word>
    11ae:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <pwm_div+0x1>
    11b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pwm_div>

    TCCR1A = 0;
    11b6:	1f bc       	out	0x2f, r1	; 47
        asm("nop");
    11b8:	00 00       	nop
        asm("nop");
    11ba:	00 00       	nop
        asm("nop");
    11bc:	00 00       	nop

    // Set PB1/OC1A and PB2/OC1B to low.
    PORTB &= ~((1<<PB1) | (1<<PB2));
    11be:	88 b3       	in	r24, 0x18	; 24
    11c0:	89 7f       	andi	r24, 0xF9	; 249
    11c2:	88 bb       	out	0x18, r24	; 24

    // Enable PB1/OC1A and PB2/OC1B as outputs.
    DDRB |= ((1<<DDB1) | (1<<DDB2));
    11c4:	87 b3       	in	r24, 0x17	; 23
    11c6:	86 60       	ori	r24, 0x06	; 6
    11c8:	87 bb       	out	0x17, r24	; 23

    // Reset the timer1 configuration.
    TCNT1 = 0;
    11ca:	1d bc       	out	0x2d, r1	; 45
    11cc:	1c bc       	out	0x2c, r1	; 44
    TCCR1A = 0;
    11ce:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0;
    11d0:	1e bc       	out	0x2e, r1	; 46
    //TCCR1C = 0;
    TIMSK = 0;
    11d2:	19 be       	out	0x39, r1	; 57

    // Set timer top value.
    ICR1 = PWM_TOP_VALUE(pwm_div);
    11d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pwm_div>
    11d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pwm_div+0x1>
    11dc:	82 95       	swap	r24
    11de:	92 95       	swap	r25
    11e0:	90 7f       	andi	r25, 0xF0	; 240
    11e2:	98 27       	eor	r25, r24
    11e4:	80 7f       	andi	r24, 0xF0	; 240
    11e6:	98 27       	eor	r25, r24
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	97 bd       	out	0x27, r25	; 39
    11ec:	86 bd       	out	0x26, r24	; 38

    // Set the PWM duty cycle to zero.
    OCR1A = 0;
    11ee:	1b bc       	out	0x2b, r1	; 43
    11f0:	1a bc       	out	0x2a, r1	; 42
    OCR1B = 0;
    11f2:	19 bc       	out	0x29, r1	; 41
    11f4:	18 bc       	out	0x28, r1	; 40

    // Configure timer 1 for PWM, Phase and Frequency Correct operation, but leave outputs disabled.
    TCCR1A = (0<<COM1A1) | (0<<COM1A0) |                    // Disable OC1A output.
    11f6:	1f bc       	out	0x2f, r1	; 47
             (0<<COM1B1) | (0<<COM1B0) |                    // Disable OC1B output.
             (0<<WGM11) | (0<<WGM10);                       // PWM, Phase and Frequency Correct, TOP = ICR1
    TCCR1B = (0<<ICNC1) | (0<<ICES1) |                      // Input on ICP1 disabled.
    11f8:	81 e1       	ldi	r24, 0x11	; 17
    11fa:	8e bd       	out	0x2e, r24	; 46
    11fc:	ec e5       	ldi	r30, 0x5C	; 92
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	16 86       	std	Z+14, r1	; 0x0e
    1202:	17 86       	std	Z+15, r1	; 0x0f
    1204:	08 95       	ret

00001206 <pwm_stop>:

void pwm_stop(void)
// Stop all PWM signals to the motor.
{
    // Disable interrupts.
    cli();
    1206:	f8 94       	cli

    // Are we moving in the A or B direction?
    if (pwm_a || pwm_b)
    1208:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    120c:	81 11       	cpse	r24, r1
    120e:	1b c0       	rjmp	.+54     	; 0x1246 <pwm_stop+0x40>
    1210:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    1214:	81 11       	cpse	r24, r1
    1216:	17 c0       	rjmp	.+46     	; 0x1246 <pwm_stop+0x40>
    1218:	08 c0       	rjmp	.+16     	; 0x122a <pwm_stop+0x24>
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    {
        asm("nop");
    121a:	00 00       	nop
//
#define DELAYLOOP 8
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	e1 f7       	brne	.-8      	; 0x121a <pwm_stop+0x14>
        PORTB &= ~((1<<PB1) | (1<<PB2));

        delay_loop(DELAYLOOP);

        // Reset the A and B direction flags.
        pwm_a = 0;
    1222:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pwm_a>
        pwm_b = 0;
    1226:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pwm_b>
    }

    // Set the PWM duty cycle to zero.
    OCR1A = 0;
    122a:	1b bc       	out	0x2b, r1	; 43
    122c:	1a bc       	out	0x2a, r1	; 42
    OCR1B = 0;
    122e:	19 bc       	out	0x29, r1	; 41
    1230:	18 bc       	out	0x28, r1	; 40

    // Restore interrupts.
    sei();
    1232:	78 94       	sei
    1234:	ec e5       	ldi	r30, 0x5C	; 92
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    123c:	86 87       	std	Z+14, r24	; 0x0e
    123e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    1242:	87 87       	std	Z+15, r24	; 0x0f

    // Save the pwm A and B duty values.
    registers_write_byte(REG_PWM_DIRA, pwm_a);
    registers_write_byte(REG_PWM_DIRB, pwm_b);
}
    1244:	08 95       	ret

    // Are we moving in the A or B direction?
    if (pwm_a || pwm_b)
    {
        // Disable OC1A and OC1B outputs.
        TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
    1246:	8f b5       	in	r24, 0x2f	; 47
    1248:	8f 73       	andi	r24, 0x3F	; 63
    124a:	8f bd       	out	0x2f, r24	; 47
        TCCR1A &= ~((1<<COM1B1) | (1<<COM1B0));
    124c:	8f b5       	in	r24, 0x2f	; 47
    124e:	8f 7c       	andi	r24, 0xCF	; 207
    1250:	8f bd       	out	0x2f, r24	; 47

        // Clear PB1 and PB2.
        PORTB &= ~((1<<PB1) | (1<<PB2));
    1252:	88 b3       	in	r24, 0x18	; 24
    1254:	89 7f       	andi	r24, 0xF9	; 249
    1256:	88 bb       	out	0x18, r24	; 24
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	df cf       	rjmp	.-66     	; 0x121a <pwm_stop+0x14>

0000125c <pwm_update>:
// a signed integer in the range of -255 to -1 for clockwise movement,
// 1 to 255 for counter-clockwise movement or zero to stop all movement.
// This function provides a sanity check against the servo position and
// will prevent the servo from being driven past a minimum and maximum
// position.
{
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	8c 01       	movw	r16, r24
    126a:	eb 01       	movw	r28, r22
    // Quick check to see if the frequency divider changed.  If so we need to 
    // configure a new top value for timer/counter1.  This value should only 
    // change infrequently so we aren't too elegant in how we handle updating
    // the value.  However, we need to be careful that we don't configure the
    // top to a value lower than the counter and compare values.
    if (registers_read_word(REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO) != pwm_div)
    126c:	69 e2       	ldi	r22, 0x29	; 41
    126e:	88 e2       	ldi	r24, 0x28	; 40
    1270:	52 d1       	rcall	.+676    	; 0x1516 <registers_read_word>
    1272:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pwm_div>
    1276:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pwm_div+0x1>
    127a:	82 17       	cp	r24, r18
    127c:	93 07       	cpc	r25, r19
    127e:	41 f1       	breq	.+80     	; 0x12d0 <pwm_update+0x74>
    {
        // Disable OC1A and OC1B outputs.
        TCCR1A &= ~((1<<COM1A1) | (1<<COM1A0));
    1280:	8f b5       	in	r24, 0x2f	; 47
    1282:	8f 73       	andi	r24, 0x3F	; 63
    1284:	8f bd       	out	0x2f, r24	; 47
        TCCR1A &= ~((1<<COM1B1) | (1<<COM1B0));
    1286:	8f b5       	in	r24, 0x2f	; 47
    1288:	8f 7c       	andi	r24, 0xCF	; 207
    128a:	8f bd       	out	0x2f, r24	; 47

        // Clear PB1 and PB2.
        PORTB &= ~((1<<PB1) | (1<<PB2));
    128c:	88 b3       	in	r24, 0x18	; 24
    128e:	89 7f       	andi	r24, 0xF9	; 249
    1290:	88 bb       	out	0x18, r24	; 24
    1292:	80 e0       	ldi	r24, 0x00	; 0
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    {
        asm("nop");
    1294:	00 00       	nop
//
#define DELAYLOOP 8
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	e1 f7       	brne	.-8      	; 0x1294 <pwm_update+0x38>
        PORTB &= ~((1<<PB1) | (1<<PB2));

        delay_loop(DELAYLOOP);

        // Reset the A and B direction flags.
        pwm_a = 0;
    129c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pwm_a>
        pwm_b = 0;
    12a0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pwm_b>

        // Update the pwm frequency divider value.
        pwm_div = registers_read_word(REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO);
    12a4:	69 e2       	ldi	r22, 0x29	; 41
    12a6:	88 e2       	ldi	r24, 0x28	; 40
    12a8:	36 d1       	rcall	.+620    	; 0x1516 <registers_read_word>
    12aa:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <pwm_div+0x1>
    12ae:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pwm_div>

        // Update the timer top value.
        ICR1 = PWM_TOP_VALUE(pwm_div);
    12b2:	82 95       	swap	r24
    12b4:	92 95       	swap	r25
    12b6:	90 7f       	andi	r25, 0xF0	; 240
    12b8:	98 27       	eor	r25, r24
    12ba:	80 7f       	andi	r24, 0xF0	; 240
    12bc:	98 27       	eor	r25, r24
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	97 bd       	out	0x27, r25	; 39
    12c2:	86 bd       	out	0x26, r24	; 38

        // Reset the counter and compare values to prevent problems with the new top value.
        TCNT1 = 0;
    12c4:	1d bc       	out	0x2d, r1	; 45
    12c6:	1c bc       	out	0x2c, r1	; 44
        OCR1A = 0;
    12c8:	1b bc       	out	0x2b, r1	; 43
    12ca:	1a bc       	out	0x2a, r1	; 42
        OCR1B = 0;
    12cc:	19 bc       	out	0x29, r1	; 41
    12ce:	18 bc       	out	0x28, r1	; 40
    }

    // Are we reversing the seek sense?
    if (registers_read_byte(REG_REVERSE_SEEK) != 0)
    12d0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <registers+0x2e>
    12d4:	88 23       	and	r24, r24
    12d6:	09 f1       	breq	.+66     	; 0x131a <pwm_update+0xbe>
    {
        // Yes. Swap the minimum and maximum position.

        // Get the minimum and maximum seek position.
        min_position = registers_read_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
    12d8:	6d e2       	ldi	r22, 0x2D	; 45
    12da:	8c e2       	ldi	r24, 0x2C	; 44
    12dc:	1c d1       	rcall	.+568    	; 0x1516 <registers_read_word>
    12de:	e8 2e       	mov	r14, r24
    12e0:	f9 2e       	mov	r15, r25
        max_position = registers_read_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
    12e2:	6b e2       	ldi	r22, 0x2B	; 43
    12e4:	8a e2       	ldi	r24, 0x2A	; 42
    12e6:	17 d1       	rcall	.+558    	; 0x1516 <registers_read_word>
    12e8:	4e 2d       	mov	r20, r14
    12ea:	5f 2d       	mov	r21, r15
    12ec:	41 15       	cp	r20, r1
    12ee:	24 e0       	ldi	r18, 0x04	; 4
    12f0:	52 07       	cpc	r21, r18
    12f2:	10 f0       	brcs	.+4      	; 0x12f8 <pwm_update+0x9c>
    12f4:	4f ef       	ldi	r20, 0xFF	; 255
    12f6:	53 e0       	ldi	r21, 0x03	; 3
    12f8:	68 2f       	mov	r22, r24
    12fa:	79 2f       	mov	r23, r25
    12fc:	61 15       	cp	r22, r1
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	78 07       	cpc	r23, r24
    1302:	10 f0       	brcs	.+4      	; 0x1308 <pwm_update+0xac>
    1304:	6f ef       	ldi	r22, 0xFF	; 255
    1306:	73 e0       	ldi	r23, 0x03	; 3
        // Make sure these values are sane 10-bit values.
        if (min_position > 0x3ff) min_position = 0x3ff;
        if (max_position > 0x3ff) max_position = 0x3ff;

        // Adjust the values because of the reverse sense.
        min_position = 0x3ff - min_position;
    1308:	2f ef       	ldi	r18, 0xFF	; 255
    130a:	33 e0       	ldi	r19, 0x03	; 3
    130c:	c9 01       	movw	r24, r18
    130e:	84 1b       	sub	r24, r20
    1310:	95 0b       	sbc	r25, r21
    1312:	ac 01       	movw	r20, r24
        max_position = 0x3ff - max_position;
    1314:	26 1b       	sub	r18, r22
    1316:	37 0b       	sbc	r19, r23
    1318:	18 c0       	rjmp	.+48     	; 0x134a <pwm_update+0xee>
    else
    {
        // No. Use the minimum and maximum position as is.

        // Get the minimum and maximum seek position.
        min_position = registers_read_word(REG_MIN_SEEK_HI, REG_MIN_SEEK_LO);
    131a:	6b e2       	ldi	r22, 0x2B	; 43
    131c:	8a e2       	ldi	r24, 0x2A	; 42
    131e:	fb d0       	rcall	.+502    	; 0x1516 <registers_read_word>
    1320:	e8 2e       	mov	r14, r24
    1322:	f9 2e       	mov	r15, r25
        max_position = registers_read_word(REG_MAX_SEEK_HI, REG_MAX_SEEK_LO);
    1324:	6d e2       	ldi	r22, 0x2D	; 45
    1326:	8c e2       	ldi	r24, 0x2C	; 44
    1328:	f6 d0       	rcall	.+492    	; 0x1516 <registers_read_word>
    132a:	4e 2d       	mov	r20, r14
    132c:	5f 2d       	mov	r21, r15
    132e:	41 15       	cp	r20, r1
    1330:	24 e0       	ldi	r18, 0x04	; 4
    1332:	52 07       	cpc	r21, r18
    1334:	10 f0       	brcs	.+4      	; 0x133a <pwm_update+0xde>
    1336:	4f ef       	ldi	r20, 0xFF	; 255
    1338:	53 e0       	ldi	r21, 0x03	; 3
    133a:	28 2f       	mov	r18, r24
    133c:	39 2f       	mov	r19, r25
    133e:	21 15       	cp	r18, r1
    1340:	84 e0       	ldi	r24, 0x04	; 4
    1342:	38 07       	cpc	r19, r24
    1344:	10 f0       	brcs	.+4      	; 0x134a <pwm_update+0xee>
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	33 e0       	ldi	r19, 0x03	; 3
        if (min_position > 0x3ff) min_position = 0x3ff;
        if (max_position > 0x3ff) max_position = 0x3ff;
    }

    // Disable clockwise movements when position is below the minimum position.
    if ((position < min_position) && (pwm < 0)) pwm = 0;
    134a:	04 17       	cp	r16, r20
    134c:	15 07       	cpc	r17, r21
    134e:	20 f4       	brcc	.+8      	; 0x1358 <pwm_update+0xfc>
    1350:	dd 23       	and	r29, r29
    1352:	14 f4       	brge	.+4      	; 0x1358 <pwm_update+0xfc>
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	d0 e0       	ldi	r29, 0x00	; 0

    // Disable counter-clockwise movements when position is above the maximum position.
    if ((position > max_position) && (pwm > 0)) pwm = 0;
    1358:	20 17       	cp	r18, r16
    135a:	31 07       	cpc	r19, r17
    135c:	28 f4       	brcc	.+10     	; 0x1368 <pwm_update+0x10c>
    135e:	1c 16       	cp	r1, r28
    1360:	1d 06       	cpc	r1, r29
    1362:	14 f4       	brge	.+4      	; 0x1368 <pwm_update+0x10c>
    1364:	c0 e0       	ldi	r28, 0x00	; 0
    1366:	d0 e0       	ldi	r29, 0x00	; 0

    // Determine if PWM is disabled in the registers.
    if (!(registers_read_byte(REG_FLAGS_LO) & (1<<FLAGS_LO_PWM_ENABLED))) pwm = 0;
    1368:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <registers+0x5>
    136c:	80 ff       	sbrs	r24, 0
    136e:	98 c0       	rjmp	.+304    	; 0x14a0 <pwm_update+0x244>

    // Determine direction of servo movement or stop.
    if (pwm < 0)
    1370:	dd 23       	and	r29, r29
    1372:	0c f0       	brlt	.+2      	; 0x1376 <pwm_update+0x11a>
    1374:	49 c0       	rjmp	.+146    	; 0x1408 <pwm_update+0x1ac>
    {
        // Less than zero. Turn clockwise.

        // Get the PWM width from the PWM value.
        pwm_width = (uint8_t) -pwm;
    1376:	c1 95       	neg	r28
static void pwm_dir_b(uint8_t pwm_duty)
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
    // Determine the duty cycle value for the timer.
    uint16_t duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
    1378:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pwm_div>
    137c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pwm_div+0x1>
    1380:	c9 01       	movw	r24, r18
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	aa 1f       	adc	r26, r26
    1394:	bb 1f       	adc	r27, r27
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	aa 1f       	adc	r26, r26
    139c:	bb 1f       	adc	r27, r27
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	aa 1f       	adc	r26, r26
    13a4:	bb 1f       	adc	r27, r27
    13a6:	9c 01       	movw	r18, r24
    13a8:	ad 01       	movw	r20, r26
    13aa:	21 50       	subi	r18, 0x01	; 1
    13ac:	31 09       	sbc	r19, r1
    13ae:	41 09       	sbc	r20, r1
    13b0:	51 09       	sbc	r21, r1
    13b2:	ac 2f       	mov	r26, r28
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	66 d4       	rcall	.+2252   	; 0x1c84 <__muluhisi3>
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	39 d4       	rcall	.+2162   	; 0x1c34 <__udivmodsi4>

    // Disable interrupts.
    cli();
    13c2:	f8 94       	cli

    // Do we need to reconfigure PWM output?
    if (!pwm_b || pwm_a)
    13c4:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <pwm_update+0x172>
    13cc:	6b c0       	rjmp	.+214    	; 0x14a4 <pwm_update+0x248>
    13ce:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    13d2:	81 11       	cpse	r24, r1
    13d4:	67 c0       	rjmp	.+206    	; 0x14a4 <pwm_update+0x248>
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <pwm_update+0x18c>
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    {
        asm("nop");
    13d8:	00 00       	nop
//
#define DELAYLOOP 8
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    13da:	8f 5f       	subi	r24, 0xFF	; 255
    13dc:	88 30       	cpi	r24, 0x08	; 8
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <pwm_update+0x17c>
        // Give the H-bridge time to respond to the above changes
        //
        delay_loop(DELAYLOOP);

        // Enable PWM_B (PB2/OC1B) output.
        TCCR1A = (1<<COM1B1);
    13e0:	80 e2       	ldi	r24, 0x20	; 32
    13e2:	8f bd       	out	0x2f, r24	; 47

        // Reset the A direction flag.
        pwm_a = 0;
    13e4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pwm_a>
    }

    // Set the B direction flag.
    pwm_b = pwm_duty;
    13e8:	c0 93 17 01 	sts	0x0117, r28	; 0x800117 <pwm_b>

    // Update the PWM duty cycle.
    OCR1A = 0;
    13ec:	1b bc       	out	0x2b, r1	; 43
    13ee:	1a bc       	out	0x2a, r1	; 42
    OCR1B = duty_cycle;
    13f0:	39 bd       	out	0x29, r19	; 41
    13f2:	28 bd       	out	0x28, r18	; 40

    // Restore interrupts.
    sei();
    13f4:	78 94       	sei
    13f6:	ec e5       	ldi	r30, 0x5C	; 92
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    13fe:	86 87       	std	Z+14, r24	; 0x0e
    1400:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    1404:	87 87       	std	Z+15, r24	; 0x0f
    1406:	62 c0       	rjmp	.+196    	; 0x14cc <pwm_update+0x270>
        pwm_dir_a(pwm_width);
#else
        pwm_dir_b(pwm_width);
#endif
    }
    else if (pwm > 0)
    1408:	1c 16       	cp	r1, r28
    140a:	1d 06       	cpc	r1, r29
    140c:	0c f0       	brlt	.+2      	; 0x1410 <pwm_update+0x1b4>
    140e:	48 c0       	rjmp	.+144    	; 0x14a0 <pwm_update+0x244>
static void pwm_dir_a(uint8_t pwm_duty)
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
    // Determine the duty cycle value for the timer.
    uint16_t duty_cycle = PWM_OCRN_VALUE(pwm_div, pwm_duty);
    1410:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pwm_div>
    1414:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pwm_div+0x1>
    1418:	c9 01       	movw	r24, r18
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	aa 1f       	adc	r26, r26
    1424:	bb 1f       	adc	r27, r27
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	aa 1f       	adc	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	aa 1f       	adc	r26, r26
    1434:	bb 1f       	adc	r27, r27
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	aa 1f       	adc	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	9c 01       	movw	r18, r24
    1440:	ad 01       	movw	r20, r26
    1442:	21 50       	subi	r18, 0x01	; 1
    1444:	31 09       	sbc	r19, r1
    1446:	41 09       	sbc	r20, r1
    1448:	51 09       	sbc	r21, r1
    144a:	ac 2f       	mov	r26, r28
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	1a d4       	rcall	.+2100   	; 0x1c84 <__muluhisi3>
    1450:	2f ef       	ldi	r18, 0xFF	; 255
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	ed d3       	rcall	.+2010   	; 0x1c34 <__udivmodsi4>

    // Disable interrupts.
    cli();
    145a:	f8 94       	cli

    // Do we need to reconfigure PWM output?
    if (!pwm_a || pwm_b)
    145c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    1460:	88 23       	and	r24, r24
    1462:	51 f1       	breq	.+84     	; 0x14b8 <pwm_update+0x25c>
    1464:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    1468:	81 11       	cpse	r24, r1
    146a:	26 c0       	rjmp	.+76     	; 0x14b8 <pwm_update+0x25c>
    146c:	09 c0       	rjmp	.+18     	; 0x1480 <pwm_update+0x224>
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    {
        asm("nop");
    146e:	00 00       	nop
//
#define DELAYLOOP 8
inline static void delay_loop(int n)
{
    uint8_t i;
    for(i=0; i<n; i++)
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	88 30       	cpi	r24, 0x08	; 8
    1474:	e1 f7       	brne	.-8      	; 0x146e <pwm_update+0x212>
        // Give the H-bridge time to respond to the above changes
        //
        delay_loop(DELAYLOOP);

        // Enable PWM_A (PB1/OC1A)  output.
        TCCR1A |= (1<<COM1A1);
    1476:	8f b5       	in	r24, 0x2f	; 47
    1478:	80 68       	ori	r24, 0x80	; 128
    147a:	8f bd       	out	0x2f, r24	; 47

        // Reset the B direction flag.
        pwm_b = 0;
    147c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pwm_b>
    }

    // Set the A direction flag.
    pwm_a = pwm_duty;
    1480:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <pwm_a>

    // Update the PWM duty cycle.
    OCR1A = duty_cycle;
    1484:	3b bd       	out	0x2b, r19	; 43
    1486:	2a bd       	out	0x2a, r18	; 42
    OCR1B = 0;
    1488:	19 bc       	out	0x29, r1	; 41
    148a:	18 bc       	out	0x28, r1	; 40

    // Restore interrupts.
    sei();
    148c:	78 94       	sei
    148e:	ec e5       	ldi	r30, 0x5C	; 92
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pwm_a>
    1496:	86 87       	std	Z+14, r24	; 0x0e
    1498:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pwm_b>
    149c:	87 87       	std	Z+15, r24	; 0x0f
    149e:	16 c0       	rjmp	.+44     	; 0x14cc <pwm_update+0x270>

    }
    else
    {
        // Stop all PWM activity to the motor.
        pwm_stop();
    14a0:	b2 de       	rcall	.-668    	; 0x1206 <pwm_stop>
    }
}
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <pwm_update+0x270>
    if (!pwm_b || pwm_a)
    {

        // Disable PWM_A (PB1/OC1A) and PWM_B (PB2/OC1B) output.
        // NOTE: Actually PWM_B should already be disabled...
       TCCR1A &= ~((1<<COM1A1) | (1<<COM1B1));
    14a4:	8f b5       	in	r24, 0x2f	; 47
    14a6:	8f 75       	andi	r24, 0x5F	; 95
    14a8:	8f bd       	out	0x2f, r24	; 47

       OCR1B = duty_cycle;
    14aa:	39 bd       	out	0x29, r19	; 41
    14ac:	28 bd       	out	0x28, r18	; 40

       // Yes. Make sure PB1 and PB2 are zero.
        PORTB &= ~((1<<PB1) | (1<<PB2));
    14ae:	88 b3       	in	r24, 0x18	; 24
    14b0:	89 7f       	andi	r24, 0xF9	; 249
    14b2:	88 bb       	out	0x18, r24	; 24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 cf       	rjmp	.-224    	; 0x13d8 <pwm_update+0x17c>
    if (!pwm_a || pwm_b)
    {

        // Disable PWM_A (PB1/OC1A) and PWM_B (PB2/OC1B) output.
        // NOTE: Actually PWM_A should already be disabled...
        TCCR1A &= ~((1<<COM1A1) | (1<<COM1B1));
    14b8:	8f b5       	in	r24, 0x2f	; 47
    14ba:	8f 75       	andi	r24, 0x5F	; 95
    14bc:	8f bd       	out	0x2f, r24	; 47

        OCR1A = duty_cycle;
    14be:	3b bd       	out	0x2b, r19	; 43
    14c0:	2a bd       	out	0x2a, r18	; 42

        // Yes. Make sure PB1 and PB2 are zero.
        PORTB &= ~((1<<PB1) | (1<<PB2));
    14c2:	88 b3       	in	r24, 0x18	; 24
    14c4:	89 7f       	andi	r24, 0xF9	; 249
    14c6:	88 bb       	out	0x18, r24	; 24
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	d1 cf       	rjmp	.-94     	; 0x146e <pwm_update+0x212>
    else
    {
        // Stop all PWM activity to the motor.
        pwm_stop();
    }
}
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	08 95       	ret

000014da <registers_defaults>:
    14da:	80 e1       	ldi	r24, 0x10	; 16
    14dc:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <registers+0x20>

    // Default TWI address.
    registers_write_byte(REG_TWI_ADDRESS, REG_DEFAULT_TWI_ADDR);

    // Call the PWM module to initialize the PWM related default values.
    pwm_registers_defaults();
    14e0:	5d de       	rcall	.-838    	; 0x119c <pwm_registers_defaults>
    regulator_registers_defaults();
#endif

#if PID_MOTION_ENABLED
    // Call the PID module to initialize the PID related default values.
    pid_registers_defaults();
    14e2:	99 dc       	rcall	.-1742   	; 0xe16 <pid_registers_defaults>
    14e4:	08 95       	ret

000014e6 <registers_init>:

void registers_init(void)
// Function to initialize all registers.
{
    // Initialize all registers to zero.
    memset(&registers[0], 0, REGISTER_COUNT);
    14e6:	ec e5       	ldi	r30, 0x5C	; 92
    14e8:	f1 e0       	ldi	r31, 0x01	; 1
    14ea:	88 e4       	ldi	r24, 0x48	; 72
    14ec:	df 01       	movw	r26, r30
    14ee:	1d 92       	st	X+, r1
    14f0:	8a 95       	dec	r24
    14f2:	e9 f7       	brne	.-6      	; 0x14ee <registers_init+0x8>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 83       	st	Z, r24
    14f8:	81 83       	std	Z+1, r24	; 0x01
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	83 83       	std	Z+3, r24	; 0x03
    registers_write_byte(REG_VERSION_MINOR, SOFTWARE_VERSION_MINOR);

    // Restore the read/write protected registers from EEPROM.  If the
    // EEPROM fails checksum this function will return zero and the
    // read/write protected registers should be initialized to defaults.
    if (!eeprom_restore_registers())
    14fe:	be d8       	rcall	.-3716   	; 0x67c <eeprom_restore_registers>
    1500:	81 11       	cpse	r24, r1
    1502:	08 c0       	rjmp	.+16     	; 0x1514 <registers_init+0x2e>
    {
        // Reset read/write protected registers to zero.
        memset(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, REGISTER_COUNT);
    1504:	48 e4       	ldi	r20, 0x48	; 72
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	68 e2       	ldi	r22, 0x28	; 40
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	8c e7       	ldi	r24, 0x7C	; 124
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	cf d3       	rcall	.+1950   	; 0x1cb0 <memset>

        // Initialize read/write protected registers to defaults.
        registers_defaults();
    1512:	e3 df       	rcall	.-58     	; 0x14da <registers_defaults>
    1514:	08 95       	ret

00001516 <registers_read_word>:
    uint8_t sreg;
    uint16_t value;


    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
    1516:	9f b7       	in	r25, 0x3f	; 63
    1518:	f8 94       	cli

    // Read the registers.
    value = (registers[address_hi] << 8) | registers[address_lo];

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
    151a:	9f bf       	out	0x3f, r25	; 63

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));

    // Read the registers.
    value = (registers[address_hi] << 8) | registers[address_lo];
    151c:	e8 2f       	mov	r30, r24
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e4 5a       	subi	r30, 0xA4	; 164
    1522:	fe 4f       	sbci	r31, 0xFE	; 254

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));

    return value;
    1524:	80 81       	ld	r24, Z
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	98 2f       	mov	r25, r24
    152a:	88 27       	eor	r24, r24

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));

    // Read the registers.
    value = (registers[address_hi] << 8) | registers[address_lo];
    152c:	e6 2f       	mov	r30, r22
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	e4 5a       	subi	r30, 0xA4	; 164
    1532:	fe 4f       	sbci	r31, 0xFE	; 254

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));

    return value;
    1534:	20 81       	ld	r18, Z
}
    1536:	82 2b       	or	r24, r18
    1538:	08 95       	ret

0000153a <registers_write_word>:
// Interrupts are disabled during the write.
{
    uint8_t sreg;

    // Clear interrupts.
    asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
    153a:	9f b7       	in	r25, 0x3f	; 63
    153c:	f8 94       	cli

    // Write the registers.
    registers[address_hi] = value >> 8;
    153e:	e8 2f       	mov	r30, r24
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	e4 5a       	subi	r30, 0xA4	; 164
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	50 83       	st	Z, r21
    registers[address_lo] = value;
    1548:	e6 2f       	mov	r30, r22
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	e4 5a       	subi	r30, 0xA4	; 164
    154e:	fe 4f       	sbci	r31, 0xFE	; 254
    1550:	40 83       	st	Z, r20

    // Restore status.
    asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
    1552:	9f bf       	out	0x3f, r25	; 63
    1554:	08 95       	ret

00001556 <twi_registers_read>:
// Read the byte from the specified register.  This function handles the
// reading of special registers such as unused registers, redirect and 
// redirected registers.
{
    // Mask the most significant bit of the address.
    address &= 0x7F;
    1556:	8f 77       	andi	r24, 0x7F	; 127

    // Are we reading a normal register?
    if (address <= MAX_WRITE_PROTECT_REGISTER)
    1558:	88 33       	cpi	r24, 0x38	; 56
    155a:	30 f4       	brcc	.+12     	; 0x1568 <twi_registers_read+0x12>
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
    155c:	e8 2f       	mov	r30, r24
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	e4 5a       	subi	r30, 0xA4	; 164
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 81       	ld	r24, Z
    {
        // Yes. Complete the read.
        return registers_read_byte(address);
    1566:	08 95       	ret
    }

    // Are we reading an unused register.
    if (address <= MAX_UNUSED_REGISTER)
    1568:	80 36       	cpi	r24, 0x60	; 96
    156a:	98 f0       	brcs	.+38     	; 0x1592 <twi_registers_read+0x3c>
        // Block the read.
        return 0;
    }

    // Are we reading a redirect register.
    if (address <= MAX_REDIRECT_REGISTER)
    156c:	80 37       	cpi	r24, 0x70	; 112
    156e:	38 f4       	brcc	.+14     	; 0x157e <twi_registers_read+0x28>
    1570:	e8 ed       	ldi	r30, 0xD8	; 216
    1572:	e8 0f       	add	r30, r24
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	e4 5a       	subi	r30, 0xA4	; 164
    1578:	fe 4f       	sbci	r31, 0xFE	; 254
    157a:	80 81       	ld	r24, Z
    {
        // Yes. Complete the read.
        return registers_read_byte(address - (MIN_REDIRECT_REGISTER - MIN_UNUSED_REGISTER));
    157c:	08 95       	ret
    157e:	e8 ec       	ldi	r30, 0xC8	; 200
    1580:	e8 0f       	add	r30, r24
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	e4 5a       	subi	r30, 0xA4	; 164
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	80 81       	ld	r24, Z

        // Get the address from the redirect register.
        address = registers_read_byte(address - (MIN_REDIRECT_REGISTER - MIN_UNUSED_REGISTER));

        // Prevent infinite recursion.
        if (address <= MAX_REDIRECT_REGISTER)
    158a:	80 37       	cpi	r24, 0x70	; 112
    158c:	20 f4       	brcc	.+8      	; 0x1596 <twi_registers_read+0x40>
        {
            // Recursively read redirected address.
            return twi_registers_read(address);
    158e:	e3 df       	rcall	.-58     	; 0x1556 <twi_registers_read>
    1590:	08 95       	ret

    // Are we reading an unused register.
    if (address <= MAX_UNUSED_REGISTER)
    {
        // Block the read.
        return 0;
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	08 95       	ret
            return twi_registers_read(address);
        }
    }

    // All other reads are blocked.
    return 0;
    1596:	80 e0       	ldi	r24, 0x00	; 0
}
    1598:	08 95       	ret

0000159a <twi_registers_write>:
// Write non-write protected registers.  This function handles the
// writing of special registers such as unused registers, redirect and 
// redirected registers.
{
    // Mask the most significant bit of the address.
    address &= 0x7F;
    159a:	8f 77       	andi	r24, 0x7F	; 127

    // Are we writing a read only register?
    if (address <= MAX_READ_ONLY_REGISTER)
    159c:	80 31       	cpi	r24, 0x10	; 16
    159e:	40 f1       	brcs	.+80     	; 0x15f0 <twi_registers_write+0x56>
        // Yes. Block the write.
        return;
    }

    // Are we writing a read/write register?
    if (address <= MAX_READ_WRITE_REGISTER)
    15a0:	80 32       	cpi	r24, 0x20	; 32
    15a2:	30 f4       	brcc	.+12     	; 0x15b0 <twi_registers_write+0x16>


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    15a4:	e8 2f       	mov	r30, r24
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	e4 5a       	subi	r30, 0xA4	; 164
    15aa:	fe 4f       	sbci	r31, 0xFE	; 254
    15ac:	60 83       	st	Z, r22
    15ae:	08 95       	ret

        return;
    }

    // Is writing to the upper registers disabled?
    if (registers_is_write_disabled())
    15b0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <registers+0x5>
    15b4:	91 ff       	sbrs	r25, 1
    15b6:	1c c0       	rjmp	.+56     	; 0x15f0 <twi_registers_write+0x56>
        // Yes. Block the write.
        return;
    }

    // Are we writing a write protected register?
    if (address <= MAX_WRITE_PROTECT_REGISTER)
    15b8:	88 33       	cpi	r24, 0x38	; 56
    15ba:	30 f4       	brcc	.+12     	; 0x15c8 <twi_registers_write+0x2e>
    15bc:	e8 2f       	mov	r30, r24
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	e4 5a       	subi	r30, 0xA4	; 164
    15c2:	fe 4f       	sbci	r31, 0xFE	; 254
    15c4:	60 83       	st	Z, r22
    15c6:	08 95       	ret

        return;
    }

    // Are we writing an unused register.
    if (address <= MAX_UNUSED_REGISTER)
    15c8:	80 36       	cpi	r24, 0x60	; 96
    15ca:	90 f0       	brcs	.+36     	; 0x15f0 <twi_registers_write+0x56>
        return;
    }


    // Are we writing a redirect register.
    if (address <= MAX_REDIRECT_REGISTER)
    15cc:	80 37       	cpi	r24, 0x70	; 112
    15ce:	38 f4       	brcc	.+14     	; 0x15de <twi_registers_write+0x44>
    15d0:	e8 ed       	ldi	r30, 0xD8	; 216
    15d2:	e8 0f       	add	r30, r24
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	e4 5a       	subi	r30, 0xA4	; 164
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	60 83       	st	Z, r22
    15dc:	08 95       	ret
// Register in-line functions.

// Read a single byte from the registers.
inline static uint8_t registers_read_byte(uint8_t address)
{
    return registers[address];
    15de:	e8 eb       	ldi	r30, 0xB8	; 184
    15e0:	e8 0f       	add	r30, r24
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	e4 5a       	subi	r30, 0xA4	; 164
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
    15e8:	80 81       	ld	r24, Z

        // Get the address from the redirect register.
        address = registers_read_byte(address - (MIN_REDIRECTED_REGISTER - MIN_UNUSED_REGISTER));

        // Prevent infinite recursion.
        if (address <= MAX_REDIRECT_REGISTER)
    15ea:	80 37       	cpi	r24, 0x70	; 112
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <twi_registers_write+0x56>
        {
            // Recursively write redirected address.
            twi_registers_write(address, data);
    15ee:	d5 df       	rcall	.-86     	; 0x159a <twi_registers_write>
    15f0:	08 95       	ret

000015f2 <twi_slave_init>:
void
twi_slave_init(uint8_t slave_address)
// Initialise USI for TWI slave mode.
{
    // Flush the buffers.
    twi_rxtail = 0;
    15f2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <twi_rxtail>
    twi_rxhead = 0;
    15f6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <twi_rxhead>
    USICR |= (1<<USISIE);
#endif // __AVR_ATtiny45__ || __AVR_ATtiny85____

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega88__) || defined(__AVR_ATmega168__)
    // Set own TWI slave address.
    TWAR = slave_address << 1;
    15fa:	88 0f       	add	r24, r24
    15fc:	82 b9       	out	0x02, r24	; 2

    // Default content = SDA released.
    TWDR = 0xFF;
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	83 b9       	out	0x03, r24	; 3

    // Initialize the TWI interrupt to wait for a new event.
    TWCR = (1<<TWEN) |                                  // Keep the TWI interface enabled.
    1602:	85 ec       	ldi	r24, 0xC5	; 197
    1604:	86 bf       	out	0x36, r24	; 54
    1606:	08 95       	ret

00001608 <twi_receive_byte>:

uint8_t twi_receive_byte(void)
// Returns a byte from the receive buffer. Waits if buffer is empty.
{
    // Wait for data in the buffer.
    while (twi_rxhead == twi_rxtail);
    1608:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <twi_rxhead>
    160c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twi_rxtail>
    1610:	98 17       	cp	r25, r24
    1612:	d1 f3       	breq	.-12     	; 0x1608 <twi_receive_byte>

    // Calculate buffer index.
    twi_rxtail = (twi_rxtail + 1 ) & TWI_RX_BUFFER_MASK;
    1614:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <twi_rxtail>
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	83 70       	andi	r24, 0x03	; 3
    161c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <twi_rxtail>

    // Return data from the buffer.
    return twi_rxbuf[twi_rxtail];
    1620:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <twi_rxtail>
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	e4 5d       	subi	r30, 0xD4	; 212
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
}
    162a:	80 81       	ld	r24, Z
    162c:	08 95       	ret

0000162e <twi_data_in_receive_buffer>:

uint8_t twi_data_in_receive_buffer(void)
// Check if there is data in the receive buffer.
{
    // Return 0 (FALSE) if the receive buffer is empty.
    return (twi_rxhead != twi_rxtail);
    162e:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <twi_rxhead>
    1632:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <twi_rxtail>
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	29 13       	cpse	r18, r25
    163a:	01 c0       	rjmp	.+2      	; 0x163e <twi_data_in_receive_buffer+0x10>
    163c:	80 e0       	ldi	r24, 0x00	; 0
}
    163e:	08 95       	ret

00001640 <__vector_17>:

//SIGNAL( SIG_2WIRE_SERIAL)
//ISR(SIG_2WIRE_SERIAL)
ISR(SIG_TWI)
// Handle the TWI interrupt condition.
{
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ef 93       	push	r30
    1664:	ff 93       	push	r31
    switch (TWSR)
    1666:	81 b1       	in	r24, 0x01	; 1
    1668:	80 3a       	cpi	r24, 0xA0	; 160
    166a:	09 f4       	brne	.+2      	; 0x166e <__vector_17+0x2e>
    166c:	cb c0       	rjmp	.+406    	; 0x1804 <__vector_17+0x1c4>
    166e:	78 f4       	brcc	.+30     	; 0x168e <__vector_17+0x4e>
    1670:	80 36       	cpi	r24, 0x60	; 96
    1672:	09 f4       	brne	.+2      	; 0x1676 <__vector_17+0x36>
    1674:	44 c0       	rjmp	.+136    	; 0x16fe <__vector_17+0xbe>
    1676:	20 f4       	brcc	.+8      	; 0x1680 <__vector_17+0x40>
    1678:	88 23       	and	r24, r24
    167a:	09 f4       	brne	.+2      	; 0x167e <__vector_17+0x3e>
    167c:	c6 c0       	rjmp	.+396    	; 0x180a <__vector_17+0x1ca>
    167e:	c8 c0       	rjmp	.+400    	; 0x1810 <__vector_17+0x1d0>
    1680:	80 38       	cpi	r24, 0x80	; 128
    1682:	09 f4       	brne	.+2      	; 0x1686 <__vector_17+0x46>
    1684:	41 c0       	rjmp	.+130    	; 0x1708 <__vector_17+0xc8>
    1686:	88 38       	cpi	r24, 0x88	; 136
    1688:	09 f4       	brne	.+2      	; 0x168c <__vector_17+0x4c>
    168a:	bc c0       	rjmp	.+376    	; 0x1804 <__vector_17+0x1c4>
    168c:	c1 c0       	rjmp	.+386    	; 0x1810 <__vector_17+0x1d0>
    168e:	80 3c       	cpi	r24, 0xC0	; 192
    1690:	99 f1       	breq	.+102    	; 0x16f8 <__vector_17+0xb8>
    1692:	28 f4       	brcc	.+10     	; 0x169e <__vector_17+0x5e>
    1694:	88 3a       	cpi	r24, 0xA8	; 168
    1696:	49 f0       	breq	.+18     	; 0x16aa <__vector_17+0x6a>
    1698:	88 3b       	cpi	r24, 0xB8	; 184
    169a:	39 f0       	breq	.+14     	; 0x16aa <__vector_17+0x6a>
    169c:	b9 c0       	rjmp	.+370    	; 0x1810 <__vector_17+0x1d0>
    169e:	88 3c       	cpi	r24, 0xC8	; 200
    16a0:	59 f1       	breq	.+86     	; 0x16f8 <__vector_17+0xb8>
    16a2:	88 3f       	cpi	r24, 0xF8	; 248
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__vector_17+0x68>
    16a6:	b6 c0       	rjmp	.+364    	; 0x1814 <__vector_17+0x1d4>
    16a8:	b3 c0       	rjmp	.+358    	; 0x1810 <__vector_17+0x1d0>

static uint8_t twi_read_data()
// Handle checked/non-checked read of data.
{
    // By default read the data to be returned.
    uint8_t data = twi_registers_read(twi_address);
    16aa:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <twi_address>
    16ae:	53 df       	rcall	.-346    	; 0x1556 <twi_registers_read>

#if TWI_CHECKED_ENABLED
    // Are we handling checked data?
    if (twi_data_state == TWI_DATA_STATE_CHECKED_DATA)
    16b0:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <twi_data_state>
    16b4:	94 30       	cpi	r25, 0x04	; 4
    16b6:	b9 f4       	brne	.+46     	; 0x16e6 <__vector_17+0xa6>
    {
        // Have we reached the end of the read?
        if (twi_chk_count < twi_chk_count_target)
    16b8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <twi_chk_count>
    16bc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <twi_chk_count_target>
    16c0:	92 17       	cp	r25, r18
    16c2:	70 f4       	brcc	.+28     	; 0x16e0 <__vector_17+0xa0>
        {
            // Add the data to the check sum.
            twi_chk_sum += data;
    16c4:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <twi_chk_sum>
    16c8:	28 0f       	add	r18, r24
    16ca:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <twi_chk_sum>

            // Increment the check sum data count.
            ++twi_chk_count;
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
    16d0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <twi_chk_count>

            // Increment the address.
            ++twi_address;
    16d4:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <twi_address>
    16d8:	9f 5f       	subi	r25, 0xFF	; 255
    16da:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <twi_address>
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <__vector_17+0xb0>
        }
        else
        {
            // Replace the data with the checksum.
            data = twi_chk_sum;
    16e0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twi_chk_sum>
    16e4:	05 c0       	rjmp	.+10     	; 0x16f0 <__vector_17+0xb0>
        }
    }
    else
    {
        // Increment the address.
        ++twi_address;
    16e6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <twi_address>
    16ea:	9f 5f       	subi	r25, 0xFF	; 255
    16ec:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <twi_address>
        case TWI_STX_ADR_ACK:
        // Data byte in TWDR has been transmitted; ACK has been received.
        case TWI_STX_DATA_ACK:

            // Read the checked/non-checked data.
            TWDR = twi_read_data();
    16f0:	83 b9       	out	0x03, r24	; 3

            // Data byte will be transmitted and ACK should be received.
            TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    16f2:	85 ec       	ldi	r24, 0xC5	; 197
    16f4:	86 bf       	out	0x36, r24	; 54
                   (0<<TWSTA) |                             // Don't generate start condition.
                   (0<<TWSTO) |                             // Don't generate stop condition.
                   (1<<TWINT) |                             // Clear the TWI interrupt.
                   (1<<TWEA) |                              // Acknowledge the data.
                   (0<<TWWC);                               //
            break;
    16f6:	8e c0       	rjmp	.+284    	; 0x1814 <__vector_17+0x1d4>
        case TWI_STX_DATA_NACK:
        // Last data byte in TWDR has been transmitted (TWEA = "0"); ACK has been received.
        case TWI_STX_DATA_ACK_LAST_BYTE:

            // Switched to the not addressed slave mode; own SLA will be recognized.
            TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    16f8:	85 ec       	ldi	r24, 0xC5	; 197
    16fa:	86 bf       	out	0x36, r24	; 54
                   (0<<TWSTA) |                             // Don't generate start condition.
                   (0<<TWSTO) |                             // Don't generate stop condition.
                   (1<<TWINT) |                             // Clear the TWI interrupt.
                   (1<<TWEA) |                              // Acknowledge the data.
                   (0<<TWWC);                               //
            break;
    16fc:	8b c0       	rjmp	.+278    	; 0x1814 <__vector_17+0x1d4>

        // Own SLA+W has been received; ACK has been returned.
        case TWI_SRX_ADR_ACK:

            // Reset the data state.
            twi_data_state = TWI_DATA_STATE_COMMAND;
    16fe:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <twi_data_state>

            // Data byte will be received and ACK will be returned.
            TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    1702:	85 ec       	ldi	r24, 0xC5	; 197
    1704:	86 bf       	out	0x36, r24	; 54
                   (0<<TWSTO) |                             // Don't generate stop condition.
                   (1<<TWINT) |                             // Clear the TWI interrupt.
                   (1<<TWEA) |                              // Acknowledge the data.
                   (0<<TWWC);                               //

            break;
    1706:	86 c0       	rjmp	.+268    	; 0x1814 <__vector_17+0x1d4>

        // Previously addressed with own SLA+W; data has been received; ACK has been returned.
        case TWI_SRX_ADR_DATA_ACK:

            // Write the data.
            twi_write_data(TWDR);
    1708:	63 b1       	in	r22, 0x03	; 3
{
    // By default, return ACK from write.
    uint8_t ack = TWI_ACK;

    // Handle the write depending on the write state.
    switch (twi_data_state)
    170a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <twi_data_state>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	79 f1       	breq	.+94     	; 0x1770 <__vector_17+0x130>
    1712:	28 f4       	brcc	.+10     	; 0x171e <__vector_17+0xde>
    1714:	88 23       	and	r24, r24
    1716:	41 f0       	breq	.+16     	; 0x1728 <__vector_17+0xe8>
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	09 f1       	breq	.+66     	; 0x175e <__vector_17+0x11e>
    171c:	70 c0       	rjmp	.+224    	; 0x17fe <__vector_17+0x1be>
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 f1       	breq	.+100    	; 0x1786 <__vector_17+0x146>
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	d9 f1       	breq	.+118    	; 0x179c <__vector_17+0x15c>
    1726:	6b c0       	rjmp	.+214    	; 0x17fe <__vector_17+0x1be>
    {
        case TWI_DATA_STATE_COMMAND:

            // This is a byte.
            if (data < TWI_CMD_RESET)
    1728:	66 23       	and	r22, r22
    172a:	34 f0       	brlt	.+12     	; 0x1738 <__vector_17+0xf8>
            {
                // Capture the address.
                twi_address = data;
    172c:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <twi_address>

                // Update the write state.
                twi_data_state = TWI_DATA_STATE_DATA;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <twi_data_state>
    1736:	63 c0       	rjmp	.+198    	; 0x17fe <__vector_17+0x1be>
            }
#if TWI_CHECKED_ENABLED
            else if (data == TWI_CMD_CHECKED_TXN)
    1738:	61 38       	cpi	r22, 0x81	; 129
    173a:	21 f4       	brne	.+8      	; 0x1744 <__vector_17+0x104>
            {
                // Update the write state.
                twi_data_state = TWI_DATA_STATE_CHECKED_COUNTING;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <twi_data_state>
    1742:	5d c0       	rjmp	.+186    	; 0x17fe <__vector_17+0x1be>
            }
#endif
            else
            {
                // Handle the command asynchronously.
                twi_rxhead = (twi_rxhead + 1) & TWI_RX_BUFFER_MASK;
    1744:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <twi_rxhead>
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	83 70       	andi	r24, 0x03	; 3
    174c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <twi_rxhead>
                twi_rxbuf[twi_rxhead] = data;
    1750:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <twi_rxhead>
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	e4 5d       	subi	r30, 0xD4	; 212
    1758:	fe 4f       	sbci	r31, 0xFE	; 254
    175a:	60 83       	st	Z, r22
    175c:	50 c0       	rjmp	.+160    	; 0x17fe <__vector_17+0x1be>
            break;

        case TWI_DATA_STATE_DATA:

            // Write the data to the addressed register.
            twi_registers_write(twi_address, data);
    175e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <twi_address>
    1762:	1b df       	rcall	.-458    	; 0x159a <twi_registers_write>

            // Increment to the next address.
            ++twi_address;
    1764:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <twi_address>
    1768:	8f 5f       	subi	r24, 0xFF	; 255
    176a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <twi_address>
    176e:	47 c0       	rjmp	.+142    	; 0x17fe <__vector_17+0x1be>
#if TWI_CHECKED_ENABLED
        case TWI_DATA_STATE_CHECKED_COUNTING:

            // Read in the count (Make sure it's less than the max count) 
			// and start the checksum
            twi_chk_sum = twi_chk_count_target = data & TWI_CHK_WRITE_BUFFER_MASK;
    1770:	6f 70       	andi	r22, 0x0F	; 15
    1772:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <twi_chk_count_target>
    1776:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <twi_chk_sum>

            // Clear the checksum and count.
            twi_chk_count = 0;
    177a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <twi_chk_count>

            // Update the write state.
            twi_data_state = TWI_DATA_STATE_CHECKED_ADDRESS;
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <twi_data_state>
    1784:	3c c0       	rjmp	.+120    	; 0x17fe <__vector_17+0x1be>
            break;

        case TWI_DATA_STATE_CHECKED_ADDRESS:

            // Capture the address and include it in the checksum
            twi_chk_sum += twi_address = data;
    1786:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <twi_address>
    178a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twi_chk_sum>
    178e:	68 0f       	add	r22, r24
    1790:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <twi_chk_sum>

            // Update the write state.
            twi_data_state = TWI_DATA_STATE_CHECKED_DATA;
    1794:	84 e0       	ldi	r24, 0x04	; 4
    1796:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <twi_data_state>
    179a:	31 c0       	rjmp	.+98     	; 0x17fe <__vector_17+0x1be>
            break;

        case TWI_DATA_STATE_CHECKED_DATA:

            // Have we reached the end of the write?
            if (twi_chk_count < twi_chk_count_target)
    179c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <twi_chk_count>
    17a0:	d0 91 2a 01 	lds	r29, 0x012A	; 0x80012a <twi_chk_count_target>
    17a4:	8d 17       	cp	r24, r29
    17a6:	78 f4       	brcc	.+30     	; 0x17c6 <__vector_17+0x186>
            {
                // No. Write the data to the checksum buffer
                twi_chk_write_buffer[twi_chk_count & TWI_CHK_WRITE_BUFFER_MASK] = data;
    17a8:	e8 2f       	mov	r30, r24
    17aa:	ef 70       	andi	r30, 0x0F	; 15
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	e7 5e       	subi	r30, 0xE7	; 231
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	60 83       	st	Z, r22

                // Add the data to the checksum.
                twi_chk_sum += data;
    17b4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <twi_chk_sum>
    17b8:	69 0f       	add	r22, r25
    17ba:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <twi_chk_sum>

                // Increment the check sum data count.
                ++twi_chk_count;
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <twi_chk_count>
    17c4:	1c c0       	rjmp	.+56     	; 0x17fe <__vector_17+0x1be>
            }
            else
            {
                // Verify the checksum
                if (data == twi_chk_sum)
    17c6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <twi_chk_sum>
    17ca:	68 13       	cpse	r22, r24
    17cc:	18 c0       	rjmp	.+48     	; 0x17fe <__vector_17+0x1be>
#if TWI_CHECKED_ENABLED
static void twi_write_buffer(void)
// Write the recieve buffer to memory.
{
    // Loop over the data within the write buffer.
    for (twi_chk_count = 0; twi_chk_count < twi_chk_count_target; twi_chk_count++)
    17ce:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <twi_chk_count>
    17d2:	dd 23       	and	r29, r29
    17d4:	a1 f0       	breq	.+40     	; 0x17fe <__vector_17+0x1be>
    17d6:	c0 e0       	ldi	r28, 0x00	; 0
    {
        // Write the data to the addressed register.
        twi_registers_write(twi_address, twi_chk_write_buffer[twi_chk_count & TWI_CHK_WRITE_BUFFER_MASK]);
    17d8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <twi_address>
    17dc:	ec 2f       	mov	r30, r28
    17de:	ef 70       	andi	r30, 0x0F	; 15
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	e7 5e       	subi	r30, 0xE7	; 231
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	60 81       	ld	r22, Z
    17e8:	d8 de       	rcall	.-592    	; 0x159a <twi_registers_write>

        // Increment to the next address.
        ++twi_address;
    17ea:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <twi_address>
    17ee:	8f 5f       	subi	r24, 0xFF	; 255
    17f0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <twi_address>
#if TWI_CHECKED_ENABLED
static void twi_write_buffer(void)
// Write the recieve buffer to memory.
{
    // Loop over the data within the write buffer.
    for (twi_chk_count = 0; twi_chk_count < twi_chk_count_target; twi_chk_count++)
    17f4:	cf 5f       	subi	r28, 0xFF	; 255
    17f6:	c0 93 2b 01 	sts	0x012B, r28	; 0x80012b <twi_chk_count>
    17fa:	dc 13       	cpse	r29, r28
    17fc:	ed cf       	rjmp	.-38     	; 0x17d8 <__vector_17+0x198>

            // Write the data.
            twi_write_data(TWDR);

            // Next data byte will be received and ACK will be returned.
            TWCR = (1<<TWEN) |                          // Keep the TWI interface enabled.
    17fe:	85 ec       	ldi	r24, 0xC5	; 197
    1800:	86 bf       	out	0x36, r24	; 54
                   (0<<TWSTO) |                         // Don't generate stop condition.
                   (1<<TWINT) |                         // Clear the TWI interrupt.
                   (1<<TWEA) |                          // Acknowledge the data.
                   (0<<TWWC);                           //

            break;
    1802:	08 c0       	rjmp	.+16     	; 0x1814 <__vector_17+0x1d4>
        case TWI_SRX_ADR_DATA_NACK:
        // A STOP condition or repeated START condition has been received while still addressed as Slave.
        case TWI_SRX_STOP_RESTART:

             // Switch to the not addressed slave mode; own SLA will be recognized.
             TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    1804:	85 ec       	ldi	r24, 0xC5	; 197
    1806:	86 bf       	out	0x36, r24	; 54
                    (0<<TWSTO) |                             // Don't generate stop condition.
                    (1<<TWINT) |                             // Clear the TWI interrupt.
                    (1<<TWEA) |                              // Acknowledge the data.
                    (0<<TWWC);                               //

            break;
    1808:	05 c0       	rjmp	.+10     	; 0x1814 <__vector_17+0x1d4>
        // Bus error due to an illegal START or STOP condition.
        case TWI_BUS_ERROR:

            // Only the internal hardware is affected, no STOP condition is sent on the bus.
            // In all cases, the bus is released and TWSTO is cleared.
            TWCR = (1<<TWEN) |                              // Keep the TWI interface enabled.
    180a:	85 ed       	ldi	r24, 0xD5	; 213
    180c:	86 bf       	out	0x36, r24	; 54
                   (0<<TWSTA) |                             // Don't generate start condition.
                   (1<<TWSTO) |                             // Don't generate stop condition.
                   (1<<TWINT) |                             // Clear the TWI interrupt.
                   (1<<TWEA) |                              // Acknowledge the data.
                   (0<<TWWC);                               //
            break;
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <__vector_17+0x1d4>
            break;

        default:

            // Reset the TWI interrupt to wait for a new event.
            TWCR = (1<<TWEN) |                                  // Keep the TWI interface enabled.
    1810:	85 ec       	ldi	r24, 0xC5	; 197
    1812:	86 bf       	out	0x36, r24	; 54
                   (1<<TWINT) |                                 // Clear the TWI interrupt.
                   (1<<TWEA) |                                  // Acknowledge the data.
                   (0<<TWWC);                                   //
            break;
    }
}
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <watchdog_init>:
    WDTCR = 0x00;
#endif

#if defined(__AVR_ATmega8__)
    // Write logical one to WDCE and WDE.
    WDTCR |= (1<<WDCE) | (1<<WDE);
    183a:	81 b5       	in	r24, 0x21	; 33
    183c:	88 61       	ori	r24, 0x18	; 24
    183e:	81 bd       	out	0x21, r24	; 33

    // Turn off WDT.
    WDTCR = 0x00;
    1840:	11 bc       	out	0x21, r1	; 33
    1842:	08 95       	ret

00001844 <watchdog_hard_reset>:


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
    1844:	ec e5       	ldi	r30, 0x5C	; 92
    1846:	f1 e0       	ldi	r31, 0x01	; 1
    1848:	85 81       	ldd	r24, Z+5	; 0x05
    184a:	8e 7f       	andi	r24, 0xFE	; 254
    184c:	85 83       	std	Z+5, r24	; 0x05
    184e:	db dc       	rcall	.-1610   	; 0x1206 <pwm_stop>
            (0<<WDP3) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);  // Minimum prescaling - 16mS.
#endif

#if defined(__AVR_ATmega8__)
    // Enable the watchdog.
    WDTCR = (0<<WDCE) |                                      // Don't set change enable.
    1850:	88 e0       	ldi	r24, 0x08	; 8
    1852:	81 bd       	out	0x21, r24	; 33
    1854:	ff cf       	rjmp	.-2      	; 0x1854 <watchdog_hard_reset+0x10>

00001856 <__subsf3>:
    1856:	50 58       	subi	r21, 0x80	; 128

00001858 <__addsf3>:
    1858:	bb 27       	eor	r27, r27
    185a:	aa 27       	eor	r26, r26
    185c:	0e d0       	rcall	.+28     	; 0x187a <__addsf3x>
    185e:	4d c1       	rjmp	.+666    	; 0x1afa <__fp_round>
    1860:	3e d1       	rcall	.+636    	; 0x1ade <__fp_pscA>
    1862:	30 f0       	brcs	.+12     	; 0x1870 <__addsf3+0x18>
    1864:	43 d1       	rcall	.+646    	; 0x1aec <__fp_pscB>
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__addsf3+0x18>
    1868:	31 f4       	brne	.+12     	; 0x1876 <__addsf3+0x1e>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	11 f4       	brne	.+4      	; 0x1872 <__addsf3+0x1a>
    186e:	1e f4       	brtc	.+6      	; 0x1876 <__addsf3+0x1e>
    1870:	33 c1       	rjmp	.+614    	; 0x1ad8 <__fp_nan>
    1872:	0e f4       	brtc	.+2      	; 0x1876 <__addsf3+0x1e>
    1874:	e0 95       	com	r30
    1876:	e7 fb       	bst	r30, 7
    1878:	29 c1       	rjmp	.+594    	; 0x1acc <__fp_inf>

0000187a <__addsf3x>:
    187a:	e9 2f       	mov	r30, r25
    187c:	4f d1       	rcall	.+670    	; 0x1b1c <__fp_split3>
    187e:	80 f3       	brcs	.-32     	; 0x1860 <__addsf3+0x8>
    1880:	ba 17       	cp	r27, r26
    1882:	62 07       	cpc	r22, r18
    1884:	73 07       	cpc	r23, r19
    1886:	84 07       	cpc	r24, r20
    1888:	95 07       	cpc	r25, r21
    188a:	18 f0       	brcs	.+6      	; 0x1892 <__addsf3x+0x18>
    188c:	71 f4       	brne	.+28     	; 0x18aa <__addsf3x+0x30>
    188e:	9e f5       	brtc	.+102    	; 0x18f6 <__addsf3x+0x7c>
    1890:	67 c1       	rjmp	.+718    	; 0x1b60 <__fp_zero>
    1892:	0e f4       	brtc	.+2      	; 0x1896 <__addsf3x+0x1c>
    1894:	e0 95       	com	r30
    1896:	0b 2e       	mov	r0, r27
    1898:	ba 2f       	mov	r27, r26
    189a:	a0 2d       	mov	r26, r0
    189c:	0b 01       	movw	r0, r22
    189e:	b9 01       	movw	r22, r18
    18a0:	90 01       	movw	r18, r0
    18a2:	0c 01       	movw	r0, r24
    18a4:	ca 01       	movw	r24, r20
    18a6:	a0 01       	movw	r20, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	ff 27       	eor	r31, r31
    18ac:	59 1b       	sub	r21, r25
    18ae:	99 f0       	breq	.+38     	; 0x18d6 <__addsf3x+0x5c>
    18b0:	59 3f       	cpi	r21, 0xF9	; 249
    18b2:	50 f4       	brcc	.+20     	; 0x18c8 <__addsf3x+0x4e>
    18b4:	50 3e       	cpi	r21, 0xE0	; 224
    18b6:	68 f1       	brcs	.+90     	; 0x1912 <__addsf3x+0x98>
    18b8:	1a 16       	cp	r1, r26
    18ba:	f0 40       	sbci	r31, 0x00	; 0
    18bc:	a2 2f       	mov	r26, r18
    18be:	23 2f       	mov	r18, r19
    18c0:	34 2f       	mov	r19, r20
    18c2:	44 27       	eor	r20, r20
    18c4:	58 5f       	subi	r21, 0xF8	; 248
    18c6:	f3 cf       	rjmp	.-26     	; 0x18ae <__addsf3x+0x34>
    18c8:	46 95       	lsr	r20
    18ca:	37 95       	ror	r19
    18cc:	27 95       	ror	r18
    18ce:	a7 95       	ror	r26
    18d0:	f0 40       	sbci	r31, 0x00	; 0
    18d2:	53 95       	inc	r21
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__addsf3x+0x4e>
    18d6:	7e f4       	brtc	.+30     	; 0x18f6 <__addsf3x+0x7c>
    18d8:	1f 16       	cp	r1, r31
    18da:	ba 0b       	sbc	r27, r26
    18dc:	62 0b       	sbc	r22, r18
    18de:	73 0b       	sbc	r23, r19
    18e0:	84 0b       	sbc	r24, r20
    18e2:	ba f0       	brmi	.+46     	; 0x1912 <__addsf3x+0x98>
    18e4:	91 50       	subi	r25, 0x01	; 1
    18e6:	a1 f0       	breq	.+40     	; 0x1910 <__addsf3x+0x96>
    18e8:	ff 0f       	add	r31, r31
    18ea:	bb 1f       	adc	r27, r27
    18ec:	66 1f       	adc	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	c2 f7       	brpl	.-16     	; 0x18e4 <__addsf3x+0x6a>
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <__addsf3x+0x98>
    18f6:	ba 0f       	add	r27, r26
    18f8:	62 1f       	adc	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	48 f4       	brcc	.+18     	; 0x1912 <__addsf3x+0x98>
    1900:	87 95       	ror	r24
    1902:	77 95       	ror	r23
    1904:	67 95       	ror	r22
    1906:	b7 95       	ror	r27
    1908:	f7 95       	ror	r31
    190a:	9e 3f       	cpi	r25, 0xFE	; 254
    190c:	08 f0       	brcs	.+2      	; 0x1910 <__addsf3x+0x96>
    190e:	b3 cf       	rjmp	.-154    	; 0x1876 <__addsf3+0x1e>
    1910:	93 95       	inc	r25
    1912:	88 0f       	add	r24, r24
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__addsf3x+0x9e>
    1916:	99 27       	eor	r25, r25
    1918:	ee 0f       	add	r30, r30
    191a:	97 95       	ror	r25
    191c:	87 95       	ror	r24
    191e:	08 95       	ret

00001920 <__divsf3>:
    1920:	0c d0       	rcall	.+24     	; 0x193a <__divsf3x>
    1922:	eb c0       	rjmp	.+470    	; 0x1afa <__fp_round>
    1924:	e3 d0       	rcall	.+454    	; 0x1aec <__fp_pscB>
    1926:	40 f0       	brcs	.+16     	; 0x1938 <__divsf3+0x18>
    1928:	da d0       	rcall	.+436    	; 0x1ade <__fp_pscA>
    192a:	30 f0       	brcs	.+12     	; 0x1938 <__divsf3+0x18>
    192c:	21 f4       	brne	.+8      	; 0x1936 <__divsf3+0x16>
    192e:	5f 3f       	cpi	r21, 0xFF	; 255
    1930:	19 f0       	breq	.+6      	; 0x1938 <__divsf3+0x18>
    1932:	cc c0       	rjmp	.+408    	; 0x1acc <__fp_inf>
    1934:	51 11       	cpse	r21, r1
    1936:	15 c1       	rjmp	.+554    	; 0x1b62 <__fp_szero>
    1938:	cf c0       	rjmp	.+414    	; 0x1ad8 <__fp_nan>

0000193a <__divsf3x>:
    193a:	f0 d0       	rcall	.+480    	; 0x1b1c <__fp_split3>
    193c:	98 f3       	brcs	.-26     	; 0x1924 <__divsf3+0x4>

0000193e <__divsf3_pse>:
    193e:	99 23       	and	r25, r25
    1940:	c9 f3       	breq	.-14     	; 0x1934 <__divsf3+0x14>
    1942:	55 23       	and	r21, r21
    1944:	b1 f3       	breq	.-20     	; 0x1932 <__divsf3+0x12>
    1946:	95 1b       	sub	r25, r21
    1948:	55 0b       	sbc	r21, r21
    194a:	bb 27       	eor	r27, r27
    194c:	aa 27       	eor	r26, r26
    194e:	62 17       	cp	r22, r18
    1950:	73 07       	cpc	r23, r19
    1952:	84 07       	cpc	r24, r20
    1954:	38 f0       	brcs	.+14     	; 0x1964 <__divsf3_pse+0x26>
    1956:	9f 5f       	subi	r25, 0xFF	; 255
    1958:	5f 4f       	sbci	r21, 0xFF	; 255
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	44 1f       	adc	r20, r20
    1960:	aa 1f       	adc	r26, r26
    1962:	a9 f3       	breq	.-22     	; 0x194e <__divsf3_pse+0x10>
    1964:	33 d0       	rcall	.+102    	; 0x19cc <__divsf3_pse+0x8e>
    1966:	0e 2e       	mov	r0, r30
    1968:	3a f0       	brmi	.+14     	; 0x1978 <__divsf3_pse+0x3a>
    196a:	e0 e8       	ldi	r30, 0x80	; 128
    196c:	30 d0       	rcall	.+96     	; 0x19ce <__divsf3_pse+0x90>
    196e:	91 50       	subi	r25, 0x01	; 1
    1970:	50 40       	sbci	r21, 0x00	; 0
    1972:	e6 95       	lsr	r30
    1974:	00 1c       	adc	r0, r0
    1976:	ca f7       	brpl	.-14     	; 0x196a <__divsf3_pse+0x2c>
    1978:	29 d0       	rcall	.+82     	; 0x19cc <__divsf3_pse+0x8e>
    197a:	fe 2f       	mov	r31, r30
    197c:	27 d0       	rcall	.+78     	; 0x19cc <__divsf3_pse+0x8e>
    197e:	66 0f       	add	r22, r22
    1980:	77 1f       	adc	r23, r23
    1982:	88 1f       	adc	r24, r24
    1984:	bb 1f       	adc	r27, r27
    1986:	26 17       	cp	r18, r22
    1988:	37 07       	cpc	r19, r23
    198a:	48 07       	cpc	r20, r24
    198c:	ab 07       	cpc	r26, r27
    198e:	b0 e8       	ldi	r27, 0x80	; 128
    1990:	09 f0       	breq	.+2      	; 0x1994 <__divsf3_pse+0x56>
    1992:	bb 0b       	sbc	r27, r27
    1994:	80 2d       	mov	r24, r0
    1996:	bf 01       	movw	r22, r30
    1998:	ff 27       	eor	r31, r31
    199a:	93 58       	subi	r25, 0x83	; 131
    199c:	5f 4f       	sbci	r21, 0xFF	; 255
    199e:	2a f0       	brmi	.+10     	; 0x19aa <__divsf3_pse+0x6c>
    19a0:	9e 3f       	cpi	r25, 0xFE	; 254
    19a2:	51 05       	cpc	r21, r1
    19a4:	68 f0       	brcs	.+26     	; 0x19c0 <__divsf3_pse+0x82>
    19a6:	92 c0       	rjmp	.+292    	; 0x1acc <__fp_inf>
    19a8:	dc c0       	rjmp	.+440    	; 0x1b62 <__fp_szero>
    19aa:	5f 3f       	cpi	r21, 0xFF	; 255
    19ac:	ec f3       	brlt	.-6      	; 0x19a8 <__divsf3_pse+0x6a>
    19ae:	98 3e       	cpi	r25, 0xE8	; 232
    19b0:	dc f3       	brlt	.-10     	; 0x19a8 <__divsf3_pse+0x6a>
    19b2:	86 95       	lsr	r24
    19b4:	77 95       	ror	r23
    19b6:	67 95       	ror	r22
    19b8:	b7 95       	ror	r27
    19ba:	f7 95       	ror	r31
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	c9 f7       	brne	.-14     	; 0x19b2 <__divsf3_pse+0x74>
    19c0:	88 0f       	add	r24, r24
    19c2:	91 1d       	adc	r25, r1
    19c4:	96 95       	lsr	r25
    19c6:	87 95       	ror	r24
    19c8:	97 f9       	bld	r25, 7
    19ca:	08 95       	ret
    19cc:	e1 e0       	ldi	r30, 0x01	; 1
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	bb 1f       	adc	r27, r27
    19d6:	62 17       	cp	r22, r18
    19d8:	73 07       	cpc	r23, r19
    19da:	84 07       	cpc	r24, r20
    19dc:	ba 07       	cpc	r27, r26
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <__divsf3_pse+0xaa>
    19e0:	62 1b       	sub	r22, r18
    19e2:	73 0b       	sbc	r23, r19
    19e4:	84 0b       	sbc	r24, r20
    19e6:	ba 0b       	sbc	r27, r26
    19e8:	ee 1f       	adc	r30, r30
    19ea:	88 f7       	brcc	.-30     	; 0x19ce <__divsf3_pse+0x90>
    19ec:	e0 95       	com	r30
    19ee:	08 95       	ret

000019f0 <__fixsfsi>:
    19f0:	04 d0       	rcall	.+8      	; 0x19fa <__fixunssfsi>
    19f2:	68 94       	set
    19f4:	b1 11       	cpse	r27, r1
    19f6:	b5 c0       	rjmp	.+362    	; 0x1b62 <__fp_szero>
    19f8:	08 95       	ret

000019fa <__fixunssfsi>:
    19fa:	98 d0       	rcall	.+304    	; 0x1b2c <__fp_splitA>
    19fc:	88 f0       	brcs	.+34     	; 0x1a20 <__fixunssfsi+0x26>
    19fe:	9f 57       	subi	r25, 0x7F	; 127
    1a00:	90 f0       	brcs	.+36     	; 0x1a26 <__fixunssfsi+0x2c>
    1a02:	b9 2f       	mov	r27, r25
    1a04:	99 27       	eor	r25, r25
    1a06:	b7 51       	subi	r27, 0x17	; 23
    1a08:	a0 f0       	brcs	.+40     	; 0x1a32 <__fixunssfsi+0x38>
    1a0a:	d1 f0       	breq	.+52     	; 0x1a40 <__fixunssfsi+0x46>
    1a0c:	66 0f       	add	r22, r22
    1a0e:	77 1f       	adc	r23, r23
    1a10:	88 1f       	adc	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	1a f0       	brmi	.+6      	; 0x1a1c <__fixunssfsi+0x22>
    1a16:	ba 95       	dec	r27
    1a18:	c9 f7       	brne	.-14     	; 0x1a0c <__fixunssfsi+0x12>
    1a1a:	12 c0       	rjmp	.+36     	; 0x1a40 <__fixunssfsi+0x46>
    1a1c:	b1 30       	cpi	r27, 0x01	; 1
    1a1e:	81 f0       	breq	.+32     	; 0x1a40 <__fixunssfsi+0x46>
    1a20:	9f d0       	rcall	.+318    	; 0x1b60 <__fp_zero>
    1a22:	b1 e0       	ldi	r27, 0x01	; 1
    1a24:	08 95       	ret
    1a26:	9c c0       	rjmp	.+312    	; 0x1b60 <__fp_zero>
    1a28:	67 2f       	mov	r22, r23
    1a2a:	78 2f       	mov	r23, r24
    1a2c:	88 27       	eor	r24, r24
    1a2e:	b8 5f       	subi	r27, 0xF8	; 248
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <__fixunssfsi+0x46>
    1a32:	b9 3f       	cpi	r27, 0xF9	; 249
    1a34:	cc f3       	brlt	.-14     	; 0x1a28 <__fixunssfsi+0x2e>
    1a36:	86 95       	lsr	r24
    1a38:	77 95       	ror	r23
    1a3a:	67 95       	ror	r22
    1a3c:	b3 95       	inc	r27
    1a3e:	d9 f7       	brne	.-10     	; 0x1a36 <__fixunssfsi+0x3c>
    1a40:	3e f4       	brtc	.+14     	; 0x1a50 <__fixunssfsi+0x56>
    1a42:	90 95       	com	r25
    1a44:	80 95       	com	r24
    1a46:	70 95       	com	r23
    1a48:	61 95       	neg	r22
    1a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	08 95       	ret

00001a52 <__floatunsisf>:
    1a52:	e8 94       	clt
    1a54:	09 c0       	rjmp	.+18     	; 0x1a68 <__floatsisf+0x12>

00001a56 <__floatsisf>:
    1a56:	97 fb       	bst	r25, 7
    1a58:	3e f4       	brtc	.+14     	; 0x1a68 <__floatsisf+0x12>
    1a5a:	90 95       	com	r25
    1a5c:	80 95       	com	r24
    1a5e:	70 95       	com	r23
    1a60:	61 95       	neg	r22
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	8f 4f       	sbci	r24, 0xFF	; 255
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	99 23       	and	r25, r25
    1a6a:	a9 f0       	breq	.+42     	; 0x1a96 <__floatsisf+0x40>
    1a6c:	f9 2f       	mov	r31, r25
    1a6e:	96 e9       	ldi	r25, 0x96	; 150
    1a70:	bb 27       	eor	r27, r27
    1a72:	93 95       	inc	r25
    1a74:	f6 95       	lsr	r31
    1a76:	87 95       	ror	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	b7 95       	ror	r27
    1a7e:	f1 11       	cpse	r31, r1
    1a80:	f8 cf       	rjmp	.-16     	; 0x1a72 <__floatsisf+0x1c>
    1a82:	fa f4       	brpl	.+62     	; 0x1ac2 <__floatsisf+0x6c>
    1a84:	bb 0f       	add	r27, r27
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <__floatsisf+0x36>
    1a88:	60 ff       	sbrs	r22, 0
    1a8a:	1b c0       	rjmp	.+54     	; 0x1ac2 <__floatsisf+0x6c>
    1a8c:	6f 5f       	subi	r22, 0xFF	; 255
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	8f 4f       	sbci	r24, 0xFF	; 255
    1a92:	9f 4f       	sbci	r25, 0xFF	; 255
    1a94:	16 c0       	rjmp	.+44     	; 0x1ac2 <__floatsisf+0x6c>
    1a96:	88 23       	and	r24, r24
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <__floatsisf+0x48>
    1a9a:	96 e9       	ldi	r25, 0x96	; 150
    1a9c:	11 c0       	rjmp	.+34     	; 0x1ac0 <__floatsisf+0x6a>
    1a9e:	77 23       	and	r23, r23
    1aa0:	21 f0       	breq	.+8      	; 0x1aaa <__floatsisf+0x54>
    1aa2:	9e e8       	ldi	r25, 0x8E	; 142
    1aa4:	87 2f       	mov	r24, r23
    1aa6:	76 2f       	mov	r23, r22
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <__floatsisf+0x5e>
    1aaa:	66 23       	and	r22, r22
    1aac:	71 f0       	breq	.+28     	; 0x1aca <__floatsisf+0x74>
    1aae:	96 e8       	ldi	r25, 0x86	; 134
    1ab0:	86 2f       	mov	r24, r22
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	2a f0       	brmi	.+10     	; 0x1ac2 <__floatsisf+0x6c>
    1ab8:	9a 95       	dec	r25
    1aba:	66 0f       	add	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	da f7       	brpl	.-10     	; 0x1ab8 <__floatsisf+0x62>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	96 95       	lsr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	97 f9       	bld	r25, 7
    1aca:	08 95       	ret

00001acc <__fp_inf>:
    1acc:	97 f9       	bld	r25, 7
    1ace:	9f 67       	ori	r25, 0x7F	; 127
    1ad0:	80 e8       	ldi	r24, 0x80	; 128
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	08 95       	ret

00001ad8 <__fp_nan>:
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	80 ec       	ldi	r24, 0xC0	; 192
    1adc:	08 95       	ret

00001ade <__fp_pscA>:
    1ade:	00 24       	eor	r0, r0
    1ae0:	0a 94       	dec	r0
    1ae2:	16 16       	cp	r1, r22
    1ae4:	17 06       	cpc	r1, r23
    1ae6:	18 06       	cpc	r1, r24
    1ae8:	09 06       	cpc	r0, r25
    1aea:	08 95       	ret

00001aec <__fp_pscB>:
    1aec:	00 24       	eor	r0, r0
    1aee:	0a 94       	dec	r0
    1af0:	12 16       	cp	r1, r18
    1af2:	13 06       	cpc	r1, r19
    1af4:	14 06       	cpc	r1, r20
    1af6:	05 06       	cpc	r0, r21
    1af8:	08 95       	ret

00001afa <__fp_round>:
    1afa:	09 2e       	mov	r0, r25
    1afc:	03 94       	inc	r0
    1afe:	00 0c       	add	r0, r0
    1b00:	11 f4       	brne	.+4      	; 0x1b06 <__fp_round+0xc>
    1b02:	88 23       	and	r24, r24
    1b04:	52 f0       	brmi	.+20     	; 0x1b1a <__fp_round+0x20>
    1b06:	bb 0f       	add	r27, r27
    1b08:	40 f4       	brcc	.+16     	; 0x1b1a <__fp_round+0x20>
    1b0a:	bf 2b       	or	r27, r31
    1b0c:	11 f4       	brne	.+4      	; 0x1b12 <__fp_round+0x18>
    1b0e:	60 ff       	sbrs	r22, 0
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <__fp_round+0x20>
    1b12:	6f 5f       	subi	r22, 0xFF	; 255
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	08 95       	ret

00001b1c <__fp_split3>:
    1b1c:	57 fd       	sbrc	r21, 7
    1b1e:	90 58       	subi	r25, 0x80	; 128
    1b20:	44 0f       	add	r20, r20
    1b22:	55 1f       	adc	r21, r21
    1b24:	59 f0       	breq	.+22     	; 0x1b3c <__fp_splitA+0x10>
    1b26:	5f 3f       	cpi	r21, 0xFF	; 255
    1b28:	71 f0       	breq	.+28     	; 0x1b46 <__fp_splitA+0x1a>
    1b2a:	47 95       	ror	r20

00001b2c <__fp_splitA>:
    1b2c:	88 0f       	add	r24, r24
    1b2e:	97 fb       	bst	r25, 7
    1b30:	99 1f       	adc	r25, r25
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <__fp_splitA+0x20>
    1b34:	9f 3f       	cpi	r25, 0xFF	; 255
    1b36:	79 f0       	breq	.+30     	; 0x1b56 <__fp_splitA+0x2a>
    1b38:	87 95       	ror	r24
    1b3a:	08 95       	ret
    1b3c:	12 16       	cp	r1, r18
    1b3e:	13 06       	cpc	r1, r19
    1b40:	14 06       	cpc	r1, r20
    1b42:	55 1f       	adc	r21, r21
    1b44:	f2 cf       	rjmp	.-28     	; 0x1b2a <__fp_split3+0xe>
    1b46:	46 95       	lsr	r20
    1b48:	f1 df       	rcall	.-30     	; 0x1b2c <__fp_splitA>
    1b4a:	08 c0       	rjmp	.+16     	; 0x1b5c <__fp_splitA+0x30>
    1b4c:	16 16       	cp	r1, r22
    1b4e:	17 06       	cpc	r1, r23
    1b50:	18 06       	cpc	r1, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	f1 cf       	rjmp	.-30     	; 0x1b38 <__fp_splitA+0xc>
    1b56:	86 95       	lsr	r24
    1b58:	71 05       	cpc	r23, r1
    1b5a:	61 05       	cpc	r22, r1
    1b5c:	08 94       	sec
    1b5e:	08 95       	ret

00001b60 <__fp_zero>:
    1b60:	e8 94       	clt

00001b62 <__fp_szero>:
    1b62:	bb 27       	eor	r27, r27
    1b64:	66 27       	eor	r22, r22
    1b66:	77 27       	eor	r23, r23
    1b68:	cb 01       	movw	r24, r22
    1b6a:	97 f9       	bld	r25, 7
    1b6c:	08 95       	ret

00001b6e <__mulsf3>:
    1b6e:	0b d0       	rcall	.+22     	; 0x1b86 <__mulsf3x>
    1b70:	c4 cf       	rjmp	.-120    	; 0x1afa <__fp_round>
    1b72:	b5 df       	rcall	.-150    	; 0x1ade <__fp_pscA>
    1b74:	28 f0       	brcs	.+10     	; 0x1b80 <__mulsf3+0x12>
    1b76:	ba df       	rcall	.-140    	; 0x1aec <__fp_pscB>
    1b78:	18 f0       	brcs	.+6      	; 0x1b80 <__mulsf3+0x12>
    1b7a:	95 23       	and	r25, r21
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <__mulsf3+0x12>
    1b7e:	a6 cf       	rjmp	.-180    	; 0x1acc <__fp_inf>
    1b80:	ab cf       	rjmp	.-170    	; 0x1ad8 <__fp_nan>
    1b82:	11 24       	eor	r1, r1
    1b84:	ee cf       	rjmp	.-36     	; 0x1b62 <__fp_szero>

00001b86 <__mulsf3x>:
    1b86:	ca df       	rcall	.-108    	; 0x1b1c <__fp_split3>
    1b88:	a0 f3       	brcs	.-24     	; 0x1b72 <__mulsf3+0x4>

00001b8a <__mulsf3_pse>:
    1b8a:	95 9f       	mul	r25, r21
    1b8c:	d1 f3       	breq	.-12     	; 0x1b82 <__mulsf3+0x14>
    1b8e:	95 0f       	add	r25, r21
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	55 1f       	adc	r21, r21
    1b94:	62 9f       	mul	r22, r18
    1b96:	f0 01       	movw	r30, r0
    1b98:	72 9f       	mul	r23, r18
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	f0 0d       	add	r31, r0
    1b9e:	b1 1d       	adc	r27, r1
    1ba0:	63 9f       	mul	r22, r19
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	f0 0d       	add	r31, r0
    1ba6:	b1 1d       	adc	r27, r1
    1ba8:	aa 1f       	adc	r26, r26
    1baa:	64 9f       	mul	r22, r20
    1bac:	66 27       	eor	r22, r22
    1bae:	b0 0d       	add	r27, r0
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	66 1f       	adc	r22, r22
    1bb4:	82 9f       	mul	r24, r18
    1bb6:	22 27       	eor	r18, r18
    1bb8:	b0 0d       	add	r27, r0
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	62 1f       	adc	r22, r18
    1bbe:	73 9f       	mul	r23, r19
    1bc0:	b0 0d       	add	r27, r0
    1bc2:	a1 1d       	adc	r26, r1
    1bc4:	62 1f       	adc	r22, r18
    1bc6:	83 9f       	mul	r24, r19
    1bc8:	a0 0d       	add	r26, r0
    1bca:	61 1d       	adc	r22, r1
    1bcc:	22 1f       	adc	r18, r18
    1bce:	74 9f       	mul	r23, r20
    1bd0:	33 27       	eor	r19, r19
    1bd2:	a0 0d       	add	r26, r0
    1bd4:	61 1d       	adc	r22, r1
    1bd6:	23 1f       	adc	r18, r19
    1bd8:	84 9f       	mul	r24, r20
    1bda:	60 0d       	add	r22, r0
    1bdc:	21 1d       	adc	r18, r1
    1bde:	82 2f       	mov	r24, r18
    1be0:	76 2f       	mov	r23, r22
    1be2:	6a 2f       	mov	r22, r26
    1be4:	11 24       	eor	r1, r1
    1be6:	9f 57       	subi	r25, 0x7F	; 127
    1be8:	50 40       	sbci	r21, 0x00	; 0
    1bea:	8a f0       	brmi	.+34     	; 0x1c0e <__mulsf3_pse+0x84>
    1bec:	e1 f0       	breq	.+56     	; 0x1c26 <__mulsf3_pse+0x9c>
    1bee:	88 23       	and	r24, r24
    1bf0:	4a f0       	brmi	.+18     	; 0x1c04 <__mulsf3_pse+0x7a>
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	66 1f       	adc	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	88 1f       	adc	r24, r24
    1bfe:	91 50       	subi	r25, 0x01	; 1
    1c00:	50 40       	sbci	r21, 0x00	; 0
    1c02:	a9 f7       	brne	.-22     	; 0x1bee <__mulsf3_pse+0x64>
    1c04:	9e 3f       	cpi	r25, 0xFE	; 254
    1c06:	51 05       	cpc	r21, r1
    1c08:	70 f0       	brcs	.+28     	; 0x1c26 <__mulsf3_pse+0x9c>
    1c0a:	60 cf       	rjmp	.-320    	; 0x1acc <__fp_inf>
    1c0c:	aa cf       	rjmp	.-172    	; 0x1b62 <__fp_szero>
    1c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c10:	ec f3       	brlt	.-6      	; 0x1c0c <__mulsf3_pse+0x82>
    1c12:	98 3e       	cpi	r25, 0xE8	; 232
    1c14:	dc f3       	brlt	.-10     	; 0x1c0c <__mulsf3_pse+0x82>
    1c16:	86 95       	lsr	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	b7 95       	ror	r27
    1c1e:	f7 95       	ror	r31
    1c20:	e7 95       	ror	r30
    1c22:	9f 5f       	subi	r25, 0xFF	; 255
    1c24:	c1 f7       	brne	.-16     	; 0x1c16 <__mulsf3_pse+0x8c>
    1c26:	fe 2b       	or	r31, r30
    1c28:	88 0f       	add	r24, r24
    1c2a:	91 1d       	adc	r25, r1
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	97 f9       	bld	r25, 7
    1c32:	08 95       	ret

00001c34 <__udivmodsi4>:
    1c34:	a1 e2       	ldi	r26, 0x21	; 33
    1c36:	1a 2e       	mov	r1, r26
    1c38:	aa 1b       	sub	r26, r26
    1c3a:	bb 1b       	sub	r27, r27
    1c3c:	fd 01       	movw	r30, r26
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <__udivmodsi4_ep>

00001c40 <__udivmodsi4_loop>:
    1c40:	aa 1f       	adc	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	ee 1f       	adc	r30, r30
    1c46:	ff 1f       	adc	r31, r31
    1c48:	a2 17       	cp	r26, r18
    1c4a:	b3 07       	cpc	r27, r19
    1c4c:	e4 07       	cpc	r30, r20
    1c4e:	f5 07       	cpc	r31, r21
    1c50:	20 f0       	brcs	.+8      	; 0x1c5a <__udivmodsi4_ep>
    1c52:	a2 1b       	sub	r26, r18
    1c54:	b3 0b       	sbc	r27, r19
    1c56:	e4 0b       	sbc	r30, r20
    1c58:	f5 0b       	sbc	r31, r21

00001c5a <__udivmodsi4_ep>:
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	88 1f       	adc	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	1a 94       	dec	r1
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <__udivmodsi4_loop>
    1c66:	60 95       	com	r22
    1c68:	70 95       	com	r23
    1c6a:	80 95       	com	r24
    1c6c:	90 95       	com	r25
    1c6e:	9b 01       	movw	r18, r22
    1c70:	ac 01       	movw	r20, r24
    1c72:	bd 01       	movw	r22, r26
    1c74:	cf 01       	movw	r24, r30
    1c76:	08 95       	ret

00001c78 <__usmulhisi3>:
    1c78:	0f d0       	rcall	.+30     	; 0x1c98 <__umulhisi3>

00001c7a <__usmulhisi3_tail>:
    1c7a:	b7 ff       	sbrs	r27, 7
    1c7c:	08 95       	ret
    1c7e:	82 1b       	sub	r24, r18
    1c80:	93 0b       	sbc	r25, r19
    1c82:	08 95       	ret

00001c84 <__muluhisi3>:
    1c84:	09 d0       	rcall	.+18     	; 0x1c98 <__umulhisi3>
    1c86:	a5 9f       	mul	r26, r21
    1c88:	90 0d       	add	r25, r0
    1c8a:	b4 9f       	mul	r27, r20
    1c8c:	90 0d       	add	r25, r0
    1c8e:	a4 9f       	mul	r26, r20
    1c90:	80 0d       	add	r24, r0
    1c92:	91 1d       	adc	r25, r1
    1c94:	11 24       	eor	r1, r1
    1c96:	08 95       	ret

00001c98 <__umulhisi3>:
    1c98:	a2 9f       	mul	r26, r18
    1c9a:	b0 01       	movw	r22, r0
    1c9c:	b3 9f       	mul	r27, r19
    1c9e:	c0 01       	movw	r24, r0
    1ca0:	a3 9f       	mul	r26, r19
    1ca2:	01 d0       	rcall	.+2      	; 0x1ca6 <__umulhisi3+0xe>
    1ca4:	b2 9f       	mul	r27, r18
    1ca6:	70 0d       	add	r23, r0
    1ca8:	81 1d       	adc	r24, r1
    1caa:	11 24       	eor	r1, r1
    1cac:	91 1d       	adc	r25, r1
    1cae:	08 95       	ret

00001cb0 <memset>:
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <memset+0x6>
    1cb4:	6d 93       	st	X+, r22
    1cb6:	41 50       	subi	r20, 0x01	; 1
    1cb8:	50 40       	sbci	r21, 0x00	; 0
    1cba:	e0 f7       	brcc	.-8      	; 0x1cb4 <memset+0x4>
    1cbc:	08 95       	ret

00001cbe <eeprom_read_block>:
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22

00001cc2 <eeprom_read_blraw>:
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e1 99       	sbic	0x1c, 1	; 28
    1cc6:	fe cf       	rjmp	.-4      	; 0x1cc4 <eeprom_read_blraw+0x2>
    1cc8:	06 c0       	rjmp	.+12     	; 0x1cd6 <eeprom_read_blraw+0x14>
    1cca:	ff bb       	out	0x1f, r31	; 31
    1ccc:	ee bb       	out	0x1e, r30	; 30
    1cce:	e0 9a       	sbi	0x1c, 0	; 28
    1cd0:	31 96       	adiw	r30, 0x01	; 1
    1cd2:	0d b2       	in	r0, 0x1d	; 29
    1cd4:	0d 92       	st	X+, r0
    1cd6:	41 50       	subi	r20, 0x01	; 1
    1cd8:	50 40       	sbci	r21, 0x00	; 0
    1cda:	b8 f7       	brcc	.-18     	; 0x1cca <eeprom_read_blraw+0x8>
    1cdc:	08 95       	ret

00001cde <eeprom_write_block>:
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <eeprom_write_block+0xa>
    1ce4:	2d 91       	ld	r18, X+
    1ce6:	05 d0       	rcall	.+10     	; 0x1cf2 <eeprom_write_r18>
    1ce8:	41 50       	subi	r20, 0x01	; 1
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	d8 f7       	brcc	.-10     	; 0x1ce4 <eeprom_write_block+0x6>
    1cee:	08 95       	ret

00001cf0 <eeprom_write_byte>:
    1cf0:	26 2f       	mov	r18, r22

00001cf2 <eeprom_write_r18>:
    1cf2:	e1 99       	sbic	0x1c, 1	; 28
    1cf4:	fe cf       	rjmp	.-4      	; 0x1cf2 <eeprom_write_r18>
    1cf6:	9f bb       	out	0x1f, r25	; 31
    1cf8:	8e bb       	out	0x1e, r24	; 30
    1cfa:	2d bb       	out	0x1d, r18	; 29
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	e2 9a       	sbi	0x1c, 2	; 28
    1d02:	e1 9a       	sbi	0x1c, 1	; 28
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	08 95       	ret

00001d0a <_exit>:
    1d0a:	f8 94       	cli

00001d0c <__stop_program>:
    1d0c:	ff cf       	rjmp	.-2      	; 0x1d0c <__stop_program>
